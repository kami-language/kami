
{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiCore.Typed.Variant.F.Translation where

open import Agora.Conventions hiding (m ; n ; k ; _‚à£_ ; _‚äî_ ; ls)
open import Agora.Data.Product.Definition
open import Agora.Order.Preorder
open import Agora.Order.Lattice
open import Agora.Category.Std.Category.Definition
open import KamiTheory.Order.StrictOrder.Base
open import KamiTheory.Data.UniqueSortedList.Definition
open import KamiTheory.Data.List.Definition
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Definition
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Instance.2Category


open import KamiTheory.Main.Generic.ModeSystem.2Graph.Definition hiding (_‚óÜ_)

open import KamiTheory.Order.StrictOrder.Base
open import KamiTheory.Basics hiding (_‚ãÜ_)



module Translation (n : ‚Ñï) where
-- (P : Preorder ùëñ) {{_ : hasDecidableEquality ‚ü® P ‚ü©}} {{_ : ‚àÄ{a b : ‚ü® P ‚ü©} -> isProp (a ‚â§ b)}} where

  P : Preorder _
  P = ùí´·∂†‚Å±‚Åø (ùîΩ n)

  instance
    hasDecidableEquality:P : hasDecidableEquality ‚ü® P ‚ü©
    hasDecidableEquality:P = {!!}

  instance
    isProp:‚â§ : ‚àÄ{a b : ‚ü® P ‚ü©} -> isProp (a ‚â§ b)
    isProp:‚â§ = {!!}

  -- Getting the mode system
  import KamiTheory.Main.Generic.ModeSystem.2Graph.Example as 2GraphExample
  import KamiTheory.Main.Generic.ModeSystem.2Cell.Example as 2CellExample
  open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Example
  open SendReceiveNarrow-ModeSystem P {{it}} {{it}}
  open 2GraphExample.SendReceiveNarrow-2Graph P
  -- open 2CellExample.SendReceiveNarrow-2Cells P {{it}} {{it}}


  -- Instantiating MTT with the 2category generated from the modesystem
  open import KamiCore.Typed.Variant.F.Definition3

  Param : MTTÍü≥ _
  Param = record
    { ùìÇ = Mode SRN-ModeSystem
    ; isCategory:ùìÇ = isCategory:byModeSystem SRN-ModeSystem
    ; is2Category:ùìÇ = is2Category:byModeSystem SRN-ModeSystem
    }


  open Definition-MTTÍü≥ {{Param}}
    renaming (ModeHom to ModeHom')

  instance
    isCategoryData:ModeHom : isCategoryData (Mode SRN-ModeSystem) ModeHom'
    isCategoryData:ModeHom = HomData {{isCategory:ùìÇ {{Param}}}}

  -- Instantiating the target language with the preorder
  open import KamiCore.Typed.Variant.F.Model7

  œÅ : isProcessSet _
  œÅ = record { Proc = ùîΩ n }

  open IR {{œÅ}}
    renaming (Ctx to Ctx' ; Mode to Mode')


  private variable
    a b c : Mode SRN-ModeSystem
    Œº ŒΩ : ModeHom' a b

  ‚¶ã_‚¶å-Mode : Mode SRN-ModeSystem -> Mode'
  ‚¶ã ‚ñ≤ ‚¶å-Mode = ‚ñ≤
  ‚¶ã ‚óØ ‚¶å-Mode = ‚óØ

  F-Type : (ModeHom' a b) -> Type ‚¶ã a ‚¶å-Mode -> Type ‚¶ã b ‚¶å-Mode
  F-Type id x = x
  F-Type (`Ôº†` U ‚®æ Œº) x = F-Type Œº (x Ôº† U)
  F-Type (`[]` ‚®æ Œº) x = F-Type Œº (‚óª x)

  ‚¶ã_‚¶å-Type : ‚ä¢Type a -> Type ‚¶ã a ‚¶å-Mode
  ‚¶ã ‚ü® X ‚à£ Œº ‚ü© ‚¶å-Type = F-Type Œº ‚¶ã X ‚¶å-Type
  ‚¶ã Unit ‚¶å-Type = Unit
  ‚¶ã Tr X ‚¶å-Type = Wrap ‚¶ã X ‚¶å-Type
  ‚¶ã ‚üÆ X ‚à£ Œº ‚üØ‚áí Y ‚¶å-Type = F-Type Œº ‚¶ã X ‚¶å-Type ‚áí ‚¶ã Y ‚¶å-Type


  ‚¶ã_‚¶å-Ctx : ‚àÄ{Œº : ModeHom' a ‚óØ} -> CtxExt Œº -> Ctx'
  ‚¶ã Œµ ‚¶å-Ctx = Œµ
  ‚¶ã_‚¶å-Ctx {Œº = Œº} (Œì ‚àô‚üÆ x ‚à£ ŒΩ ‚üØ) = ‚¶ã Œì ‚¶å-Ctx , F-Type (ŒΩ ‚óÜ Œº) (‚¶ã x ‚¶å-Type)
  ‚¶ã Œì ‚àô! œâ ‚¶å-Ctx = ‚¶ã Œì ‚¶å-Ctx






  ‚¶ã_‚¶å-Term : ‚àÄ{ps} -> ‚àÄ{Œº : ModeHom' a ‚óØ} -> {Œì : CtxExt Œº}
             -> ‚àÄ{A} -> Œµ ‚ãÜ Œì ‚ä¢ A
             -> ‚àë Œª Œ¥ -> ‚¶ã Œì ‚¶å-Ctx ‚ä¢ ‚¶ã ‚ü® A ‚à£ Œº ‚ü© ‚¶å-Type / Œ¥ GlobalFibered[ ps ]
  ‚¶ã var x Œ± ‚¶å-Term = {!!}
  ‚¶ã tt ‚¶å-Term = {!!}
  ‚¶ã mod Œº t ‚¶å-Term = {!!}
  ‚¶ã letmod ŒΩ t t‚ÇÅ ‚¶å-Term = {!!}
  ‚¶ã trans x t ‚¶å-Term = {!!}
  ‚¶ã pure t ‚¶å-Term = {!!}
  ‚¶ã seq t t‚ÇÅ ‚¶å-Term = {!!}
  ‚¶ã_‚¶å-Term {Œº = id} (lam t) =
    let Œ¥' , t' = ‚¶ã t ‚¶å-Term
    in lam‚óØ Œ¥' , lam-GlobalFibered t'
  ‚¶ã_‚¶å-Term {Œº = `Ôº†` i ‚®æ id} (lam {Œº = id} t) =
    let Œ¥' , t' = ‚¶ã t ‚¶å-Term
        t'' = lam-GlobalFibered t'
    in {!!} , commute-Ôº†-Exp _ t''
  ‚¶ã_‚¶å-Term {Œº = Œº} (lam t) = {!!}
    -- let Œ¥' , t' = ‚¶ã t ‚¶å-Term
    -- in {!Œ¥'!} , {!lam-GlobalFibered t'!}
  ‚¶ã app t s ‚¶å-Term = {!!}
    -- let Œ¥t' , t' = ‚¶ã t ‚¶å-Term
    --     Œ¥s' , s' = ‚¶ã s ‚¶å-Term
    -- in {!!}












