
{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiCore.Typed.Variant.F.Model5 where

open import Agora.Conventions hiding (k ; _‚à£_ ; _‚äî_ ; ls)
open import Agora.Data.Product.Definition
open import Agora.Order.Preorder
open import Agora.Order.Lattice

module IR {Loc : Preorder ùëñ} {{_ : hasFiniteMeets Loc}} (split : ‚ü® Loc ‚ü© -> List ‚ü® Loc ‚ü©) where


  private variable
    k l : ‚ü® Loc ‚ü©
    ks ls : List ‚ü® Loc ‚ü©

  data ‚ñ≤Type : ùí∞ ùëñ
  data ‚óØType : ‚ü® Loc ‚ü© -> ùí∞ ùëñ

  -- data Comm (l : ‚ü® Loc ‚ü©) : ùí∞ ùëñ where
  --   comm : ‚óØType l -> ‚ü® Loc ‚ü© -> Comm l
  --   _‚à•_ : Comm l -> Comm l -> Comm l
  --   _‚â´_ : Comm l -> Comm l -> Comm l
  --   ùüò : Comm l

  data ‚ñ≤Type where
    -- the boxing operator:
    -- actually the list of locations should be the
    -- partition of `l`.
    ‚óª_‚à£_ : ‚óØType l -> List ‚ü® Loc ‚ü© -> ‚ñ≤Type
    NN : ‚ñ≤Type
    BB : ‚ñ≤Type
    Unit : ‚ñ≤Type
    Either : ‚ñ≤Type -> ‚ñ≤Type -> ‚ñ≤Type
    -- _[_]‚áí_ : ‚ñ≤Type -> 

  infix 40 ‚óª_‚à£_

  data ‚óØType where
    _Ôº†_ : ‚ñ≤Type -> (l : ‚ü® Loc ‚ü©) -> ‚óØType l
    _‚áí_ : ‚óØType l -> ‚óØType l -> ‚óØType l

  infix 30 _Ôº†_
  infix 45 _‚áí_

  data ‚óØCtx : ùí∞ ùëñ where
    Œµ : ‚óØCtx
    _,_ : ‚óØCtx -> ‚óØType l -> ‚óØCtx

  ùìÅ : ‚óØCtx -> ‚Ñï
  ùìÅ Œµ = 0
  ùìÅ (Œì , x) = suc (ùìÅ Œì)

  data ‚ñ≤Ctx : ùí∞ ùëñ where
    Œµ : ‚ñ≤Ctx
    _,_ : ‚ñ≤Ctx -> ‚ñ≤Type -> ‚ñ≤Ctx

  private variable
    Œì Œî : ‚óØCtx
    X Y Z : ‚óØType l
    Œû : ‚ñ≤Ctx
    A B C D : ‚ñ≤Type
    -- c d : Comm l
    -- r s :  Loc

  data _‚ä¢‚óØ_ : ‚óØCtx -> ‚óØType l -> ùí∞ ùëñ
  data _‚ä¢‚óØ-Var_ : ‚óØCtx -> ‚óØType l -> ùí∞ ùëñ
  data _‚ä¢_//_ : ‚óØCtx -> ‚ñ≤Type -> ‚ü® Loc ‚ü© -> ùí∞ ùëñ
  data _‚áõ_ : ‚óØCtx -> ‚óØCtx -> ùí∞ ùëñ

  data _‚ä¢‚óØ-Com : ‚Ñï -> ùí∞ ùëñ
  data _‚ä¢‚óØ-Com where
    var : Œì ‚ä¢‚óØ-Var X -> n ‚ä¢‚óØ-Com
    com : ‚óØType l -> ‚ü® Loc ‚ü© -> n ‚ä¢‚óØ-Com
    _‚à•_ : (Œ¥‚ÇÄ Œ¥‚ÇÅ : n ‚ä¢‚óØ-Com) -> n ‚ä¢‚óØ-Com
    _‚â´_ : (Œ¥‚ÇÄ Œ¥‚ÇÅ : n ‚ä¢‚óØ-Com) -> n ‚ä¢‚óØ-Com
    [] : n ‚ä¢‚óØ-Com
    -- app : Œì , X ‚ä¢‚óØ-Com -> 

  _[_]-Com : suc n ‚ä¢‚óØ-Com -> n ‚ä¢‚óØ-Com -> n ‚ä¢‚óØ-Com
  _[_]-Com = {!!}

  private variable
    Œ¥ Œ¥‚ÇÄ Œ¥‚ÇÅ : n ‚ä¢‚óØ-Com

  -- _‚ä¢_ : ‚óØCtx -> ‚óØType l -> ùí∞ ùëñ
  -- _‚ä¢_ Œì A = Œì ‚ä¢[ ùüò ] A

  data _‚ä¢‚óØ-Var_ where
    zero : Œì , X ‚ä¢‚óØ-Var X
    suc : Œì ‚ä¢‚óØ-Var X -> Œì , Y ‚ä¢‚óØ-Var X

  data _‚ä¢‚óØ_ where
    broadcast : Œì ‚ä¢‚óØ ‚óª X ‚à£ ks Ôº† l -> Œì ‚ä¢‚óØ X
    lam : Œì , X ‚ä¢‚óØ Y -> Œì ‚ä¢‚óØ X ‚áí Y
    app : Œì ‚ä¢‚óØ X ‚áí Y -> Œì ‚ä¢‚óØ X -> Œì ‚ä¢‚óØ Y
    -- seq : Œì ‚ä¢ X -> Œì , X ‚ä¢ Y -> Œì ‚ä¢ Y

  data _‚à£_‚Ü¶_ : ‚óØType l -> ‚ü® Loc ‚ü© -> ‚ñ≤Type -> ùí∞ ùëñ where
    proj-Ôº† : A Ôº† l ‚à£ l ‚Ü¶ A
    proj-Ôº†-‚â† : (¬¨ k ‚àº l) -> A Ôº† k ‚à£ l ‚Ü¶ Unit

  data _‚ä¢‚óØ_//_¬©_ : (Œì : ‚óØCtx) -> ‚ñ≤Type -> ‚ü® Loc ‚ü© -> ùìÅ Œì ‚ä¢‚óØ-Com -> ùí∞ ùëñ where

    var : (i : Œì ‚ä¢‚óØ-Var X) -> X ‚à£ k ‚Ü¶ A -> Œì ‚ä¢‚óØ A // k ¬© var i

    recv : X ‚à£ l ‚Ü¶ A -> Œì ‚ä¢‚óØ A // l ¬© com X k

    send : X ‚à£ k ‚Ü¶ A -> Œì ‚ä¢‚óØ ‚óª X ‚à£ ks // k ¬© []  -> Œì ‚ä¢‚óØ A // k ¬© com X k

    seq : Œì ‚ä¢‚óØ A // k ¬© Œ¥‚ÇÄ
        -> Œì , A Ôº† k ‚ä¢‚óØ B // k ¬© Œ¥‚ÇÅ
        -> Œì ‚ä¢‚óØ B // k ¬© (Œ¥‚ÇÄ ‚â´ (Œ¥‚ÇÅ [ [] ]-Com))

    -- lam : Œì , A ‚ä¢‚óØ B // k ¬© Œ¥ -> Œì ‚ä¢‚óØ A [ ]‚áí


  data _‚ä¢‚óØ_/_¬©_ : (Œì : ‚óØCtx) -> ‚óØType l -> List ‚ü® Loc ‚ü© -> ùìÅ Œì ‚ä¢‚óØ-Com -> ùí∞ ùëñ where
    [] : Œì ‚ä¢‚óØ X / ks ¬© Œ¥
    _,_by_ : Œì ‚ä¢‚óØ X / ks ¬© Œ¥ -> X ‚à£ k ‚Ü¶ A -> Œì ‚ä¢‚óØ A // k ¬© Œ¥ -> Œì ‚ä¢‚óØ X / (k ‚à∑ ks) ¬© Œ¥

  infixl 23 _,_by_


  data _‚ä¢‚óª_‚à£_//_ : ‚óØCtx -> ‚óØType l -> List ‚ü® Loc ‚ü© -> ‚ü® Loc ‚ü© -> ùí∞ ùëñ where
    [] : Œì ‚ä¢‚óª X ‚à£ [] // l
    _,_by_ : Œì ‚ä¢‚óª X ‚à£ ks // l -> X ‚à£ k ‚Ü¶ A -> Œì ‚ä¢ A // l -> Œì ‚ä¢‚óª X ‚à£ (k ‚à∑ ks) // l

  data _‚ä¢_//_ where
    rec-Either : Œì ‚ä¢ Either A B // l
               -> Œì , A Ôº† l ‚ä¢ C // l
               -> Œì , B Ôº† l ‚ä¢ C // l
               -> Œì ‚ä¢ C // l

    box : Œì ‚ä¢‚óª X ‚à£ ks // l -> Œì ‚ä¢ ‚óª X ‚à£ ks // l

  -- data _‚ä¢‚ñ≤_¬©_ : (Œì : ‚ñ≤Ctx) -> ‚ñ≤Type -> Œì ‚ä¢‚óØ-> ùí∞ ùëñ where

  data _‚ä¢‚ñ≤-Var_ : ‚ñ≤Ctx -> ‚ñ≤Type -> ùí∞ ùëñ where
    zero : Œû , A ‚ä¢‚ñ≤-Var A
    suc : Œû ‚ä¢‚ñ≤-Var A -> Œû , B ‚ä¢‚ñ≤-Var A

  data _‚áõ_ where
    Œµ : Œì ‚áõ Œµ
    _,_ : Œì ‚áõ Œî -> Œì ‚ä¢‚óØ X -> Œì ‚áõ Œî , X


  ----------------------------------------------------------
  -- Constructing the categories
  --
  -- The local categories.
  -- Note that the Loc here is the location where the local
  -- type should be located (ergo we don't have ‚à®, but have
  -- an ‚àß operation)
  ‚ñ≤Obj : ‚ü® Loc ‚ü© -> ùí∞ ùëñ
  ‚ñ≤Obj _ = ‚ñ≤Ctx


  -- The global category.
  -- Note that the loc here is the range of processes that
  -- participate in the choreography, thus only should contain
  -- ‚à® operations).
  ‚óØObj : ùí∞ ùëñ
  ‚óØObj = ‚óØCtx


  ----------------------------------------------------------
  -- Constructing the functors
  --
  -- 1) from local to global by using "Ôº†"
  --
  ---------------------
  -- The object map
  FÔº† : ‚àÄ l -> ‚ñ≤Obj l -> ‚óØObj
  FÔº† l Œµ = Œµ
  FÔº† l (Œì , A) = FÔº† l Œì , A Ôº† l
  --
  ---------------------
  -- The arrow map
  --
  -- We have to...
  --
  FÔº†-Var : Œû ‚ä¢‚ñ≤-Var A -> FÔº† l Œû ‚ä¢‚óØ-Var A Ôº† l
  FÔº†-Var zero = zero
  FÔº†-Var (suc v) = suc (FÔº†-Var v)

  -- FÔº†-Term : Œû ‚ä¢‚ñ≤ A  -> FÔº† l Œû ‚ä¢‚óØ A Ôº† l
  -- FÔº†-Term = {!!}

{-
  -- 2) from global to local by using ‚óª
  F‚óª : ‚àÄ l -> ‚óØObj -> ‚ñ≤Obj l
  F‚óª l (k , X) = ‚óª X ‚à£ split k

-}



module _ where

  open import Data.Fin using (#_ ; zero ; suc ; Fin)
  open import Data.List using (_‚à∑_ ; [])
  open import Data.Vec using ([] ; _‚à∑_ ; _++_) renaming (Vec to StdVec)

  open import KamiTheory.Basics hiding (typed)
  open import KamiTheory.Order.Preorder.Instances

  -------------------
  -- The preorder of 3 processes with common knowledge is
  -- the standard preorder on `Fin 3 ‚Üí Bool`, which inherits
  -- the structure from `Bool` itself. We encode such functions
  -- as bool-vectors of length 3. Note that while we actually
  -- have to take the opposite preorder of that, we do so implicitly
  -- by defining our singleton lists to be inverted, i.e., everywhere
  -- true except at the required position.
  PP : Preorder _
  PP = ‚Ä≤ StdVec ùüö 3 ‚Ä≤

  -- Singletons are vectors with `true` everywhere except the required
  -- position
  singleton : Fin 3 -> ‚ü® PP ‚ü©
  singleton i = singletonVec true false i

  -- We postulate that the relation is merely a proposition.
  postulate instance
    _ : ‚àÄ{a b : ‚ü® PP ‚ü©} -> isProp (a ‚â§ b)

  -------------------
  -- Various shorter notations
  P : ùí∞ _
  P = ‚ü® PP ‚ü©

  -- We call the three processes `uu`, `vv` and `ww`
  uu vv ww : P
  uu = singleton (# 0)
  vv = singleton (# 1)
  ww = singleton (# 2)

  -- this is the common knowledge of both `uu` and `vv`
  uuvv : P
  uuvv = false ‚à∑ (false ‚à∑ (true ‚à∑ []))

  pattern UVP = false ‚à∑ false ‚à∑ true ‚à∑ []
  pattern UP = false ‚à∑ true ‚à∑ true ‚à∑ []
  pattern VP = true ‚à∑ false ‚à∑ true ‚à∑ []



  open IR {Loc = PP} {{{!it!}}} {!!}
  ----------------------------------------------------------
  -- Examples
  --
  -- 1) sending and receiving a value
  ex1 : Œµ , BB Ôº† uu ‚ä¢‚óØ BB Ôº† vv / (uu ‚à∑ vv ‚à∑ []) ¬© {!!} -- com (BB Ôº† vv) uu
  ex1 = []
      , proj-Ôº† by {!!} -- recv proj-Ôº†
      , proj-Ôº†-‚â† {!!} by seq (var zero proj-Ôº†) (send {!!} {!var ? ?!})

