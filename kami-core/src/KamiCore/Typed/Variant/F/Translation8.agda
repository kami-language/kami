
{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiCore.Typed.Variant.F.Translation8 where

open import Agora.Conventions hiding (m ; n ; k ; _‚à£_ ; _‚äî_ ; ls)
open import Agora.Data.Product.Definition
open import Agora.Order.Preorder
open import Agora.Order.Lattice
open import Agora.Category.Std.Category.Definition
open import Agora.Category.Std.2Category.Definition
open import KamiTheory.Order.StrictOrder.Base
open import KamiTheory.Data.UniqueSortedList.Definition
open import KamiTheory.Data.List.Definition
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Definition
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Instance.2Category


open import KamiTheory.Main.Generic.ModeSystem.2Graph.Definition renaming (_‚óÜ_ to _‚óÜ'_ ; id to id')

open import KamiTheory.Order.StrictOrder.Base
open import KamiTheory.Basics hiding (_‚ãÜ_)



module Translation (n : ‚Ñï) where
-- (P : Preorder ùëñ) {{_ : hasDecidableEquality ‚ü® P ‚ü©}} {{_ : ‚àÄ{a b : ‚ü® P ‚ü©} -> isProp (a ‚â§ b)}} where

  P : Preorder _
  P = ùí´·∂†‚Å±‚Åø (ùîΩ n)

  instance
    hasDecidableEquality:P : hasDecidableEquality ‚ü® P ‚ü©
    hasDecidableEquality:P = {!!}

  instance
    isProp:‚â§ : ‚àÄ{a b : ‚ü® P ‚ü©} -> isProp (a ‚â§ b)
    isProp:‚â§ = {!!}

  -- Getting the mode system
  import KamiTheory.Main.Generic.ModeSystem.2Graph.Example as 2GraphExample
  import KamiTheory.Main.Generic.ModeSystem.2Cell.Example as 2CellExample
  import KamiTheory.Main.Generic.ModeSystem.2Cell.Definition as 2CellDefinition
  open 2CellDefinition.2CellDefinition hiding (id)
  open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Example
  open SendReceiveNarrow-ModeSystem P {{it}} {{it}}
  open 2GraphExample.SendReceiveNarrow-2Graph P
  -- open 2CellExample.SendReceiveNarrow-2Cells P {{it}} {{it}}


  -- Instantiating MTT with the 2category generated from the modesystem
  open import KamiCore.Typed.Variant.F.Definition3

  instance
    Param : MTTÍü≥ _
    Param = record
      { ùìÇ = Mode SRN-ModeSystem
      ; isCategory:ùìÇ = isCategory:byModeSystem SRN-ModeSystem
      ; is2Category:ùìÇ = is2Category:byModeSystem SRN-ModeSystem
      }


  open Definition-MTTÍü≥ {{Param}}
    renaming (ModeHom to ModeHom' ; _‚ä¢_ to _‚ä¢'_)

  instance
    isCategoryData:ModeHom : isCategoryData (Mode SRN-ModeSystem) ModeHom'
    isCategoryData:ModeHom = HomData {{isCategory:ùìÇ {{Param}}}}

  instance
    isCategory:ModeHom : isCategory (Mode SRN-ModeSystem)
    isCategory:ModeHom = record { Hom = ModeHom' }

  instance
    is2Category:ModeHom : is2Category ‚Ä≤(Mode SRN-ModeSystem)‚Ä≤
    is2Category:ModeHom = is2Category:ùìÇ {{Param}}


  -- Instantiating the target language with the preorder
  open import KamiCore.Typed.Variant.F.Model8

  œÅ : isProcessSet _
  œÅ = record { Proc = ùîΩ n }

  open IR {{œÅ}}
    renaming (Ctx to Ctx' ; Mode to Mode')


  private variable
    a b c : Mode SRN-ModeSystem
    Œº ŒΩ Œ∑ œâ : ModeHom' a b

  data isBroadcast : ‚àÄ{a b} -> {Œº ŒΩ : ModeHom' a b} -> Œº ‚üπ ŒΩ -> ùí∞‚ÇÄ where
  -- data isBroadcast {a b} : {Œº ŒΩ : ModeHom' a b} -> Œº ‚üπ ŒΩ -> ùí∞‚ÇÄ where
    -- br : ‚àÄ{U œï‚ÇÄ œï‚ÇÅ} -> isBroadcast [ (incl []) ‚à£ incl (incl (œï‚ÇÄ ‚åü[ recv U ]‚åû (œï‚ÇÅ ‚åü)) ‚à∑ []) ]
    br : ‚àÄ{U} -> isBroadcast [ (incl []) ‚à£ incl (incl (id' ‚åü[ recv U ]‚åû (id' ‚åü)) ‚à∑ []) ]



  --------------------------------------------------
  -- Translating MTT terms into a form where the
  -- contexts only have single restrictions form.
  data isCtx‚ÇÅ : Ctx a -> ùí∞‚ÇÄ where
    Œµ : isCtx‚ÇÅ {a = a} Œµ
    stepVar : {Œì : Ctx b} -> isCtx‚ÇÅ Œì -> {A : ‚ä¢Type a} -> {Œº : a ‚ü∂ b} -> isCtx‚ÇÅ (Œì ‚àô‚üÆ A ‚à£ Œº ‚üØ)
    stepRes : {Œì : Ctx b} -> isCtx‚ÇÅ Œì -> {Œº : BaseModeHom-SRN a b} -> isCtx‚ÇÅ (Œì ‚àô! (Œº ‚®æ id))


  addRes : (Œº : a ‚ü∂ b) -> ‚àë isCtx‚ÇÅ {a = b} -> ‚àë isCtx‚ÇÅ {a = a}
  addRes id' Œì = Œì
  addRes (x ‚®æ Œº) Œì =
    let Œì' , Œì'p = addRes Œº Œì
    in Œì' ‚àô! (x ‚®æ id') , stepRes Œì'p

  toCtx‚ÇÅ : Ctx a -> ‚àë isCtx‚ÇÅ {a = a}
  toCtx‚ÇÅ Œµ = Œµ , Œµ
  toCtx‚ÇÅ (Œì ‚àô‚üÆ x ‚à£ x‚ÇÅ ‚üØ) =
    let Œì , Œìp = toCtx‚ÇÅ Œì
    in Œì ‚àô‚üÆ x ‚à£ x‚ÇÅ ‚üØ , stepVar Œìp
  toCtx‚ÇÅ (Œì ‚àô! Œº) = addRes Œº (toCtx‚ÇÅ Œì)

  -- to‚ÇÅ-Var : ‚àÄ{Œì : Ctx a} {A : ‚ä¢Type a} -> Œì ‚ä¢ A -> fst (toCtx‚ÇÅ Œì) ‚ä¢ 

  --------------------------------------------------
  -- Translating MTT terms into a form where the
  -- contexts only have {Ôº†j}{‚óª} form.



  --------------------------------------------------
  -- An MTT version which has only single 
  module _ where
    private variable
      Œì : Ctx a
      A B : ‚ä¢Type a

    data _‚ä¢_ : Ctx a -> ‚ä¢Type a -> ùí∞‚ÇÄ where
      var : ‚àÄ{Œº : _ ‚ü∂ b} -> Œì ‚ä¢Var‚üÆ A ‚à£ Œº ‚áí Œ∑ ‚üØ -> (Œ± : Œº ‚üπ Œ∑) -> Œì ‚ä¢ A
      tt : Œì ‚ä¢ Unit

      -- modalities
      mod : ‚àÄ Œº -> Œì ‚àô! (Œº ‚®æ id') ‚ä¢ A -> Œì ‚ä¢ ‚ü® A ‚à£ Œº ‚®æ id' ‚ü©
      letmod : ‚àÄ(Œº : BaseModeHom-SRN a b) -> (ŒΩ : b ‚ü∂ c)
            -> Œì ‚àô! ŒΩ ‚ä¢ ‚ü® A ‚à£ Œº ‚®æ id' ‚ü©
            -> Œì ‚àô‚üÆ A ‚à£ Œº ‚®æ ŒΩ ‚üØ ‚ä¢ B
            -> Œì ‚ä¢ B

      letmod' : ‚àÄ(Œº : BaseModeHom-SRN a b)
            -> Œì ‚ä¢ ‚ü® A ‚à£ Œº ‚®æ id' ‚ü©
            -> Œì ‚àô‚üÆ A ‚à£ Œº ‚®æ id' ‚üØ ‚ä¢ B
            -> Œì ‚ä¢ B

      -- explicit transformations
      trans : ‚àÄ {Œº ŒΩ : a ‚ü∂ b} -> (Œ± : Œº ‚üπ ŒΩ) -> isBroadcast Œ± -> Œì ‚ä¢ ‚ü® A ‚à£ Œº ‚ü© -> Œì ‚ä¢ Tr ‚ü® A ‚à£ ŒΩ ‚ü©

      -- transformations monad
      pure : Œì ‚ä¢ A -> Œì ‚ä¢ Tr A
      seq : ‚àÄ{A : ‚ä¢Type a} -> Œì ‚ä¢ Tr A -> Œì ‚àô‚üÆ A ‚à£ id ‚üØ ‚ä¢ B -> Œì ‚ä¢ Tr B

      -- functions
      lam : Œì ‚àô‚üÆ A ‚à£ id' ‚üØ ‚ä¢ B -> Œì ‚ä¢ ‚üÆ A ‚à£ id' ‚üØ‚áí B

      -- app : Œì ‚ä¢ ‚üÆ A ‚à£ Œº ‚üØ‚áí B -> Œì ‚àô! Œº ‚ä¢ A -> Œì ‚ä¢ B
      app : Œì ‚ä¢ ‚üÆ A ‚à£ id' ‚üØ‚áí B -> Œì ‚ä¢ A -> Œì ‚ä¢ B

    -- shift-Ôº† : ‚àÄ{i} -> {A : ‚ä¢Type a} -> (Œì ‚àô! (`Ôº†` i ‚®æ id')) ‚àô‚üÆ A ‚à£ Œº ‚üØ ‚ä¢ B -> (Œì ‚àô‚üÆ A ‚à£ Œº ‚óÜ (`Ôº†` i ‚®æ id') ‚üØ ‚àô! (`Ôº†` i ‚®æ id')) ‚ä¢ B
    -- shift-Ôº† = {!!}

    shift-Ôº† : ‚àÄ{i} -> {A : ‚ä¢Type ‚ñ≤} -> (Œì ‚àô! (`Ôº†` i ‚®æ id')) ‚àô‚üÆ A ‚à£ id' ‚üØ ‚ä¢ B -> (Œì ‚àô‚üÆ ‚ü® A ‚à£ (`Ôº†` i ‚®æ id') ‚ü© ‚à£ id' ‚üØ ‚àô! (`Ôº†` i ‚®æ id')) ‚ä¢ B
    shift-Ôº† = {!!}

    split-path : ‚àÄ{Œºs : ModeHom' b c} -> ‚àÄ{Œº} -> ‚àÄ{A : ‚ä¢Type a} -> Œì ‚àô! (Œº ‚®æ Œºs) ‚ä¢ A -> (Œì ‚àô! Œºs) ‚àô! (Œº ‚®æ id') ‚ä¢ A
    split-path = {!!}

    id-annotate : ‚àÄ{Œì : Ctx a} -> Œì ‚àô‚üÆ A ‚à£ Œº ‚üØ ‚ä¢ B -> Œì ‚àô‚üÆ ‚ü® A ‚à£ Œº ‚ü© ‚à£ id' ‚üØ ‚ä¢ B
    id-annotate = {!!}



  data isCtx‚ÇÇ : Ctx a -> ùí∞‚ÇÄ where
    Œµ : isCtx‚ÇÇ {a = a} Œµ
    stepVar : {Œì : Ctx ‚óØ} -> isCtx‚ÇÇ Œì -> {A : ‚ä¢Type a} -> {Œº : a ‚ü∂ ‚óØ} -> isCtx‚ÇÇ (Œì ‚àô‚üÆ A ‚à£ Œº ‚üØ)
    stepRes : {Œì : Ctx a} -> isCtx‚ÇÇ Œì -> isCtx‚ÇÇ (Œì ‚àô! Œº)
    -- stepRes-‚óª : {Œì : Ctx ‚ñ≤} -> isCtx‚ÇÇ Œì -> isCtx‚ÇÇ (Œì ‚àô! (`[]` ‚®æ id))
    -- stepRes-Ôº† : {Œì : Ctx ‚óØ} -> ‚àÄ{p} -> isCtx‚ÇÇ Œì -> isCtx‚ÇÇ (Œì ‚àô! (`Ôº†` p ‚®æ id))







  ‚¶ã_‚¶å-Mode : Mode SRN-ModeSystem -> Mode'
  ‚¶ã ‚ñ≤ ‚¶å-Mode = ‚ñ≤
  ‚¶ã ‚óØ ‚¶å-Mode = ‚óØ

  F-Type : (ModeHom' a b) -> Type ‚¶ã a ‚¶å-Mode -> Type ‚¶ã b ‚¶å-Mode
  F-Type id' x = x
  F-Type (`Ôº†` U ‚®æ Œº) x = F-Type Œº (x Ôº† U)
  F-Type (`[]` ‚®æ Œº) x = F-Type Œº (‚óª x)

  ‚¶ã_‚¶å-Type : ‚ä¢Type a -> Type ‚¶ã a ‚¶å-Mode
  ‚¶ã ‚ü® X ‚à£ Œº ‚ü© ‚¶å-Type = F-Type Œº ‚¶ã X ‚¶å-Type
  ‚¶ã Unit ‚¶å-Type = Unit
  ‚¶ã Tr X ‚¶å-Type = Tr ‚¶ã X ‚¶å-Type
  ‚¶ã ‚üÆ X ‚à£ Œº ‚üØ‚áí Y ‚¶å-Type = F-Type Œº ‚¶ã X ‚¶å-Type ‚áí ‚¶ã Y ‚¶å-Type


  TargetCtx : Mode SRN-ModeSystem -> ùí∞ _
  TargetCtx ‚ñ≤ = Ctx' √ó ‚ü® P ‚ü©
  TargetCtx ‚óØ = Ctx'

  addRestr : (Œº : ModeHom' a b) -> TargetCtx b -> TargetCtx a
  addRestr id' Œì = Œì
  addRestr (`Ôº†` U ‚®æ Œº) Œì = addRestr Œº Œì , U
  addRestr (`[]` ‚®æ Œº) Œì = let Œì' , U = addRestr Œº Œì in Œì' ,[ U ]

  transl-Ctx : ‚àÄ{Œº : ModeHom' a ‚óØ} -> (Œì : CtxExt Œº) -> isCtx‚ÇÇ (Œµ ‚ãÜ Œì) -> TargetCtx a
  transl-Ctx Œµ Œìp = Œµ
  transl-Ctx (Œì ‚àô‚üÆ x ‚à£ Œº ‚üØ) (stepVar Œìp) = transl-Ctx Œì Œìp , F-Type Œº ‚¶ã x ‚¶å-Type
  transl-Ctx (_‚àô!_ Œì Œº) (stepRes Œìp) = addRestr Œº (transl-Ctx Œì Œìp)
    -- let Œì' , i = transl-Ctx Œì Œìp
    -- in {!!}
  -- transl-Ctx (_‚àô!_ {‚óØ} Œì Œº) (stepRes Œìp) = {!!}
  -- transl-Ctx (Œì ‚àô! (`[]` ‚®æ id')) (stepRes-‚óª Œìp) = let Œì , i = transl-Ctx Œì Œìp in Œì ,[ i ]
  -- transl-Ctx (Œì ‚àô! (`Ôº†` i ‚®æ id')) (stepRes-Ôº† Œìp) = transl-Ctx Œì Œìp , i

  -- ‚¶ã Œµ ‚¶å-Ctx = Œµ
  -- ‚¶ã_‚¶å-Ctx {Œº = Œº} (Œì ‚àô‚üÆ x ‚à£ ŒΩ ‚üØ) = ‚¶ã Œì ‚¶å-Ctx , F-Type (ŒΩ ‚óÜ Œº) (‚¶ã x ‚¶å-Type)
  -- ‚¶ã Œì ‚àô! œâ ‚¶å-Ctx = ‚¶ã Œì ‚¶å-Ctx
             -- -> ‚àë Œª Œ¥ -> ‚àÄ p -> p ‚àà ‚ü® ps ‚ü© -> ‚àÄ{Œî Œîp} -> transl-Ctx Œì Œìp ‚à£ p ‚Ü¶ Œî , Œîp Ctx -> Œî ‚ä¢ ‚¶ã A ‚¶å-Type / Œ¥ GlobalFiber[ p ]

{-
  pre-schedule : ‚àÄ{Œì A i j Œ¥ ps} -> Œì , A Ôº† i ,[ i ] ‚ä¢ A Ôº† j / Œ¥ GlobalFibered[ ps ]
  ‚ü® pre-schedule ‚ü© p x (IR.proj-Ôº† x‚ÇÅ IR.done) (IR.stepRes (Œìp IR., IR.proj-Ôº† x‚ÇÇ IR.done)) = {!!} , {!!} , let B = {!!}
                                                                                                              t = var (res (zero (proj-Ôº† {!!} B)))
                                                                                                            in map-local-project B t -- var (IR.res (zero {!!}))
  ‚ü® pre-schedule ‚ü© p x (IR.proj-Ôº† x‚ÇÅ IR.done) (IR.stepRes (Œìp IR., IR.proj-Ôº† x‚ÇÇ IR.Unit-‚ñ≤)) = {!!} , {!!} , {!!}
  ‚ü® pre-schedule ‚ü© p x (IR.proj-Ôº† x‚ÇÅ IR.done) (IR.stepRes (Œìp IR., IR.proj-Ôº†-‚â† x‚ÇÇ)) = {!!} , {!!} , {!!}
  ‚ü® pre-schedule ‚ü© p x (IR.proj-Ôº† x‚ÇÅ IR.Unit-‚ñ≤) (IR.stepRes (Œìp IR., x‚ÇÇ)) = {!!} , {!!} , {!!}
  -- ‚ü® pre-schedule ‚ü© p x (IR.proj-Ôº† x‚ÇÅ IR.done) (IR.stepRes (Œìp IR., x‚ÇÇ)) = {!!} , {!!} , {!!} -- var (IR.res (zero (proj-Ôº† refl-‚â§ {!!})))
  -- ‚ü® pre-schedule ‚ü© p x (IR.proj-Ôº† x‚ÇÅ IR.Unit-‚ñ≤) (IR.stepRes (Œìp IR., x‚ÇÇ)) = {!!} , {!!} , var (IR.res (zero {!!}))
  ‚ü® pre-schedule ‚ü© p x (proj-Ôº†-‚â† x‚ÇÅ) Œìp = {!!}
  -}

  -- schedule : ‚àÄ{Œì A i j} -> Œì , A Ôº† i ‚ä¢ ‚óª (A Ôº† j) / {!!} GlobalFiber[ {!!} ]
  -- schedule = {!!}

  multibox : ‚àÄ{ŒΩ : ModeHom' ‚óØ ‚ñ≤} -> ‚àÄ{Œì i X ps} -> addRestr ŒΩ (Œì , i) ‚ä¢ X GlobalFibered[ ps ]
             -> Œì ‚ä¢ F-Type ŒΩ X Ôº† i GlobalFibered[ ps ]
  multibox {ŒΩ = `[]` ‚®æ id'} t = box-GlobalFibered t
  multibox {ŒΩ = `[]` ‚®æ `Ôº†` U ‚®æ ŒΩ} t = multibox {ŒΩ = ŒΩ} (box-GlobalFibered t)

  multibox' : ‚àÄ{ŒΩ : ModeHom' ‚óØ ‚óØ} -> ‚àÄ{Œì X ps} -> addRestr ŒΩ Œì ‚ä¢ X GlobalFibered[ ps ]
             -> Œì ‚ä¢ F-Type ŒΩ X GlobalFibered[ ps ]
  multibox' {ŒΩ = id'} t = t
  multibox' {ŒΩ = `[]` ‚®æ `Ôº†` U ‚®æ ŒΩ} t = multibox' {ŒΩ = ŒΩ} (box-GlobalFibered t)

  mutual
    {-# TERMINATING #-} -- NOTE: Agda does not see that the letmod case terminates
    transl-Term-‚ñ≤ : ‚àÄ{ps i} -> ‚àÄ{Œº : ModeHom' ‚óØ ‚óØ} -> (Œì : CtxExt Œº) -> (Œìp : isCtx‚ÇÇ (Œµ ‚ãÜ Œì))
              -> ‚àÄ{A} -> Œµ ‚ãÜ Œì ‚àô! (`Ôº†` i ‚®æ id') ‚ä¢ A
              -> transl-Ctx Œì Œìp  ‚ä¢ (‚¶ã A ‚¶å-Type Ôº† i) GlobalFibered[ ps ]
    transl-Term-‚ñ≤ Œì Œìp (var x Œ±) = {!!}
    transl-Term-‚ñ≤ Œì Œìp tt = {!!}
    transl-Term-‚ñ≤ Œì Œìp (mod `[]` t) = {!!}
      -- let Œ¥' , ts' = transl-Term-‚óØ _ (stepRes-‚óª (stepRes-Ôº† Œìp)) t
      -- in _ , box-GlobalFibered ts'
    transl-Term-‚ñ≤ Œì Œìp (letmod' `[]` t s) =
      let t' = transl-Term-‚ñ≤ _ Œìp t
          s' = transl-Term-‚ñ≤ _ (stepVar Œìp) (shift-Ôº† (id-annotate s))
      in letin-GlobalFibered t' s'
    transl-Term-‚ñ≤ Œì Œìp (letmod (`Ôº†` U) ŒΩ t s) =

          -- t'  : addRestr ŒΩ (transl-Ctx Œì Œìp , i) ‚ä¢ ‚¶ã A‚ÇÅ ‚¶å-Type Ôº† U /
      let t' = transl-Term-‚óØ _ (stepRes (stepRes Œìp)) t

          -- s'  : (transl-Ctx Œì Œìp , (F-Type ŒΩ (‚¶ã A‚ÇÅ ‚¶å-Type Ôº† U) Ôº† i)) ‚ä¢ ‚¶ã A ‚¶å-Type Ôº† i / ...
          s' = transl-Term-‚ñ≤ _ (stepVar Œìp) (shift-Ôº† (id-annotate s))
      in letin-GlobalFibered (multibox t') s'
    transl-Term-‚ñ≤ Œì Œìp (letmod `[]` id' t s) = {!!}
    transl-Term-‚ñ≤ Œì Œìp (letmod `[]` (`Ôº†` U ‚®æ ŒΩ) t s) =
      let t' = split-path t

          -- t''  : addRestr ŒΩ (transl-Ctx Œì Œìp , i) ‚ä¢ ‚óª ‚¶ã A‚ÇÅ ‚¶å-Type Ôº† U /
          t'' = transl-Term-‚ñ≤ _ (stepRes (stepRes Œìp)) t'

          -- s'   : (transl-Ctx Œì Œìp , (F-Type ŒΩ (‚óª ‚¶ã A‚ÇÅ ‚¶å-Type Ôº† U) Ôº† i)) ‚ä¢ ‚¶ã A ‚¶å-Type Ôº† i /
          s' = transl-Term-‚ñ≤ _ (stepVar Œìp) (shift-Ôº† (id-annotate s))

      in letin-GlobalFibered (multibox t'') s'
    transl-Term-‚ñ≤ Œì Œìp (trans x xP t) = {!!}
    transl-Term-‚ñ≤ Œì Œìp (pure t) = {!!}
    transl-Term-‚ñ≤ Œì Œìp (seq t t‚ÇÅ) = {!!}
    transl-Term-‚ñ≤ Œì Œìp (lam t) =
      let t' = shift-Ôº† t
          rest' = transl-Term-‚ñ≤ _ (stepVar Œìp) t'
      in commute-Ôº†-Exp _ (lam-GlobalFibered rest')
    transl-Term-‚ñ≤ Œì Œìp (app t t‚ÇÅ) = {!!}


    transl-Term-‚óØ : ‚àÄ{ps} -> ‚àÄ{Œº : ModeHom' ‚óØ ‚óØ} -> (Œì : CtxExt Œº) -> (Œìp : isCtx‚ÇÇ (Œµ ‚ãÜ Œì))
              -> ‚àÄ{A} -> Œµ ‚ãÜ Œì ‚ä¢ A
              -> transl-Ctx Œì Œìp  ‚ä¢ ‚¶ã A ‚¶å-Type GlobalFibered[ ps ]
    transl-Term-‚óØ Œì Œìp (var x Œ±) = {!!}
    transl-Term-‚óØ Œì Œìp tt = {!!}
    transl-Term-‚óØ Œì Œìp (mod (`Ôº†` U) t) =
      let t' = transl-Term-‚ñ≤ _ Œìp t
      in t'
    transl-Term-‚óØ Œì Œìp (letmod (`Ôº†` U) ŒΩ t s) =
      let t' = transl-Term-‚óØ _ (stepRes Œìp) t
          s' = transl-Term-‚óØ _ (stepVar Œìp) s
      in letin-GlobalFibered (multibox' t') s'
      -- in _ , letin-GlobalFibered t' s'
    transl-Term-‚óØ Œì Œìp (letmod `[]` (`Ôº†` i ‚®æ ŒΩ) t s) =
      let t' = split-path t

          t'' = transl-Term-‚ñ≤ _ (stepRes Œìp) t'

          s' = transl-Term-‚óØ _ (stepVar Œìp) s
      in letin-GlobalFibered (multibox' t'') s'

    transl-Term-‚óØ Œì Œìp (letmod' Œº t t‚ÇÅ) = {!Œº!}
    transl-Term-‚óØ Œì Œìp (trans .([ incl [] ‚à£ incl (incl (id' ‚åü[ recv _ ]‚åû id' ‚åü) ‚à∑ []) ]) br t) =
      let t' = transl-Term-‚óØ _ Œìp t
      in broadcast-GlobalFibered t'
    transl-Term-‚óØ Œì Œìp (pure t) = {!!}
    transl-Term-‚óØ Œì Œìp (seq t t‚ÇÅ) = {!!}
    transl-Term-‚óØ Œì Œìp (lam t) =
      let t' = transl-Term-‚óØ _ (stepVar Œìp) t
      in lam-GlobalFibered t'
    transl-Term-‚óØ Œì Œìp (app t s) =
      let t' = transl-Term-‚óØ _ Œìp t
          s' = transl-Term-‚óØ _ Œìp s
      in app-GlobalFibered t' s'




{-
  ‚¶ã_‚¶å-Term : ‚àÄ{ps} -> ‚àÄ{Œº : ModeHom' a ‚óØ} -> {Œì : CtxExt Œº}
             -> ‚àÄ{A} -> Œµ ‚ãÜ Œì ‚ä¢ A
             -> ‚àë Œª Œ¥ -> ‚¶ã Œì ‚¶å-Ctx ‚ä¢ ‚¶ã ‚ü® A ‚à£ Œº ‚ü© ‚¶å-Type / Œ¥ GlobalFibered[ ps ]
  ‚¶ã var x Œ± ‚¶å-Term = {!!}
  ‚¶ã tt ‚¶å-Term = {!!}
  ‚¶ã mod Œº t ‚¶å-Term = {!!}
  ‚¶ã letmod ŒΩ t t‚ÇÅ ‚¶å-Term = {!!}
  ‚¶ã trans x t ‚¶å-Term = {!!}
  ‚¶ã pure t ‚¶å-Term = {!!}
  ‚¶ã seq t t‚ÇÅ ‚¶å-Term = {!!}
  ‚¶ã_‚¶å-Term {Œº = id} (lam t) =
    let Œ¥' , t' = ‚¶ã t ‚¶å-Term
    in lam‚óØ Œ¥' , lam-GlobalFibered t'
  ‚¶ã_‚¶å-Term {Œº = `Ôº†` i ‚®æ id} (lam {Œº = id} t) =
    let Œ¥' , t' = ‚¶ã t ‚¶å-Term
        t'' = lam-GlobalFibered t'
    in {!!} , commute-Ôº†-Exp _ t''
  ‚¶ã_‚¶å-Term {Œº = Œº} (lam t) = {!!}
    -- let Œ¥' , t' = ‚¶ã t ‚¶å-Term
    -- in {!Œ¥'!} , {!lam-GlobalFibered t'!}
  ‚¶ã app t s ‚¶å-Term = {!!}
    -- let Œ¥t' , t' = ‚¶ã t ‚¶å-Term
    --     Œ¥s' , s' = ‚¶ã s ‚¶å-Term
    -- in {!!}

-}









