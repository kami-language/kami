
{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiCore.Typed.Variant.I.Definition2 where

open import Agora.Conventions hiding (m ; n ; k ; _‚àô_ ; _‚à£_)
open import Agora.Category.Std.Category.Definition
open import Agora.Category.Std.2Category.Definition
open import Agora.Category.Std.Functor.Definition
open import Agora.Category.Std.Natural.Definition

-- open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Definition
-- open import KamiTheory.Main.Generic.ModeSystem.2Graph.Definition -- hiding (_‚óÜ_)
-- open import KamiTheory.Main.Generic.ModeSystem.2Cell.Definition


record MTT·¥µ (ùëñ : ùîè ^ 5) : ùí∞ (ùëñ ‚Å∫) where
  field ùìÇ : ùí∞ (ùëñ ‚åÑ 0)
  field {{isCategory:ùìÇ}} : isCategory {ùëñ ‚åÑ 1 ‚ãØ 2} ùìÇ
  field {{is2Category:ùìÇ}} : is2Category {ùëñ ‚åÑ 3 ‚ãØ 4} ‚Ä≤ ùìÇ ‚Ä≤

open MTT·¥µ {{...}} public


module Definition-MTT·¥µ {ùëñ : ùîè ^ 5} {{Param : MTT·¥µ ùëñ}} where
  private
    ùìÇ' : Category _
    ùìÇ' = ‚Ä≤ ùìÇ ‚Ä≤

  private variable
    k l m n o p : ùìÇ {{Param}}
    Œº : Hom {{of ùìÇ'}} m n
    ŒΩ : Hom {{of ùìÇ'}} n o
    Œ∑ : Hom {{of ùìÇ'}} o k
    œâ : Hom {{of ùìÇ'}} n o


  data ‚ä¢Type : ùìÇ -> ùí∞ (ùëñ ‚åÑ 0 ‚äî ùëñ ‚åÑ 1) where
    ‚ü®_‚à£_‚ü© : ‚ä¢Type m -> m ‚ü∂ n -> ‚ä¢Type n
    Unit : ‚ä¢Type m
    ‚üÆ_‚à£_‚üØ‚áí_ : ‚ä¢Type m -> m ‚ü∂ n -> ‚ä¢Type n -> ‚ä¢Type n

  infix 30 ‚ü®_‚à£_‚ü© ‚üÆ_‚à£_‚üØ‚áí_

  private variable
    A : ‚ä¢Type m
    B : ‚ä¢Type n

  data Restriction : ùìÇ -> ùí∞ (ùëñ ‚åÑ 0 ‚äî ùëñ ‚åÑ 1) where
    [] : Restriction k
    _‚à∑_ : k ‚ü∂ l -> Restriction l -> Restriction k

  private variable
    M : Restriction k
    N : Restriction k

  -- Given a restriction with domain k, we can precompose
  -- the first modality with a morphism (Œº : l ‚Üí k) to get
  -- a restriction with domain l.
  --
  -- This is the operation denoted by Œì.{Œº} in MTT.
  --
  -- _‚Ü≥_ : l ‚ü∂ k -> Restriction k -> Restriction l
  -- Œº ‚Ü≥ [] = []
  -- Œº ‚Ü≥ (x ‚à∑ M) = Œº ‚óÜ x ‚à∑ M

  data Ctx : (m : ùìÇ) -> ùí∞ (ùëñ ‚åÑ 0 ‚äî ùëñ ‚åÑ 1) where
    Œµ : Ctx m
    _‚àô‚üÆ_‚à£_/_‚üØ : Ctx n -> ‚ä¢Type m -> (Œº : m ‚ü∂ n) -> (Œ∑ : k ‚ü∂ n) -> Ctx k


  infix 32 _‚àô‚üÆ_‚à£_/_‚üØ _‚àô‚üÆ_‚à£_‚üØ
  infixl 30 _‚àô!_

  -- pattern _‚àô‚üÆ_‚à£_‚áí_‚üØ/_ Œì A Œº Œ∑ M = Œì ‚àô‚üÆ A ‚à£ Œº ‚üØ / (Œ∑ ‚à∑ M)
  -- : Ctx n M -> ‚ä¢Type m -> (Œº : m ‚ü∂ n) -> {Œ∑ : k ‚ü∂ n} -> Ctx k (Œ∑ ‚à∑ M)

  _‚àô‚üÆ_‚à£_‚üØ : Ctx n -> ‚ä¢Type m -> m ‚ü∂ n -> Ctx n
  _‚àô‚üÆ_‚à£_‚üØ Œì A Œº = Œì ‚àô‚üÆ A ‚à£ Œº / id ‚üØ

  _‚àô!_ : Ctx n -> m ‚ü∂ n -> Ctx m
  Œµ ‚àô! Œº = Œµ
  (Œì ‚àô‚üÆ x ‚à£ Œº / Œ∑ ‚üØ) ‚àô! œâ = Œì ‚àô‚üÆ x ‚à£ Œº / œâ ‚óÜ Œ∑ ‚üØ

  private variable
    Œì : Ctx m
    Œî : Ctx n

  data _‚ä¢Var‚üÆ_‚à£_‚áí_‚üØ : (Œì : Ctx k) (A : ‚ä¢Type m) (Œº : m ‚ü∂ l) (Œ∑ : k ‚ü∂ l) ‚Üí ùí∞ ùëñ where
    zero : ‚àÄ{Œì} -> (Œì ‚àô‚üÆ A ‚à£ Œº / Œ∑ ‚üØ) ‚ä¢Var‚üÆ A ‚à£ Œº ‚áí Œ∑ ‚üØ
    suc  : ‚àÄ{Œì}
         -> {Œº : m ‚ü∂ l}
         -> {Œ∑ : k ‚ü∂ l}
         -> {ŒΩ : o ‚ü∂ _}
         -> {œâ : p ‚ü∂ _}
         -> (h : Œì ‚ä¢Var‚üÆ A ‚à£ Œº ‚áí Œ∑ ‚üØ)
         -> (Œì ‚àô‚üÆ B ‚à£ ŒΩ / œâ ‚üØ) ‚ä¢Var‚üÆ A ‚à£ Œº ‚áí œâ ‚óÜ Œ∑ ‚üØ

  data _‚ä¢_ : Ctx m -> ‚ä¢Type m -> ùí∞ ùëñ where
    var : ‚àÄ{Œº : k ‚ü∂ o} -> Œì ‚ä¢Var‚üÆ A ‚à£ Œº ‚áí Œ∑ ‚üØ -> (Œ± : Œº ‚üπ Œ∑) -> Œì ‚ä¢ A
    tt : Œì ‚ä¢ Unit
    mod : Œì ‚àô! Œº ‚ä¢ A -> Œì ‚ä¢ ‚ü® A ‚à£ Œº ‚ü©
    letmod : ‚àÄ{Œº : m ‚ü∂ n} {ŒΩ : n ‚ü∂ o}
           -> Œì ‚àô! ŒΩ ‚ä¢ ‚ü® A ‚à£ Œº ‚ü©
           -> Œì ‚àô‚üÆ A ‚à£ Œº ‚óÜ ŒΩ ‚üØ ‚ä¢ B
           -> Œì ‚ä¢ B
    lam : Œì ‚àô‚üÆ A ‚à£ Œº ‚üØ ‚ä¢ B -> Œì ‚ä¢ ‚üÆ A ‚à£ Œº ‚üØ‚áí B
    app : Œì ‚ä¢ ‚üÆ A ‚à£ Œº ‚üØ‚áí B -> Œì ‚àô! Œº ‚ä¢ B -> Œì ‚ä¢ B

  data _‚üº_ : Ctx m -> Ctx m -> ùí∞ ùëñ where
    id-Ctx : Œì ‚üº Œì
    _,‚Äº_ : ‚àÄ Œì -> {Œº ŒΩ : m ‚ü∂ n} -> Œº ‚üπ ŒΩ -> ‚àÄ{Œì' Œì''} -> (Œì ‚àô! ŒΩ ‚â° Œì') -> (Œì ‚àô! Œº ‚â° Œì'') -> Œì' ‚üº Œì''
    -- _,‚Äº_ : ‚àÄ Œì -> {Œº ŒΩ : m ‚ü∂ n} -> Œº ‚üπ ŒΩ -> ‚àÄ{Œì' Œì''} -> (Œì ‚àô! ŒΩ ‚â° Œì') -> (Œì ‚àô! Œº ‚â° Œì'') -> Œì ‚àô! ŒΩ ‚üº Œì ‚àô! Œº
    _,!_ : Œì ‚üº Œî -> ‚àÄ{Œì' Œî'} -> (Œì ‚àô! Œº ‚â° Œì') -> (Œî ‚àô! Œº ‚â° Œî') -> Œì' ‚üº Œî'
    _,‚üÆ_‚à£_‚üØ : Œì ‚üº Œî -> Œì ‚àô! Œº ‚ä¢ A -> Œì ‚üº Œî ‚àô‚üÆ A ‚à£ Œº ‚üØ


  _[_]-Var : {Œº : m ‚ü∂ n} -> Œî ‚ä¢Var‚üÆ A ‚à£ Œº ‚áí Œ∑ ‚üØ √ó-ùí∞ (Œº ‚üπ Œ∑) -> (Œ¥ : Œì ‚üº Œî) -> Œì ‚ä¢ A
  (zero , Œ±) [ id-Ctx ]-Var = var zero Œ±
  (zero , Œ±) [ ((Œì ‚àô‚üÆ x‚ÇÉ ‚à£ Œº / Œ∑ ‚üØ) ,‚Äº x) refl-‚â° refl-‚â° ]-Var = var zero {!!}
  (zero , Œ±) [ (Œ¥ ,! refl-‚â°) x‚ÇÅ ]-Var = {!!}
  (zero , Œ±) [ _,‚üÆ_‚à£_‚üØ Œ¥ x ]-Var = {!zero!}
  (suc v , Œ±) [ id-Ctx ]-Var = {!let res = v , ? [ ? ]-Var in ?!}
  (suc v , Œ±) [ (Œì ,‚Äº x) x‚ÇÅ x‚ÇÇ ]-Var = {!!}
  (suc v , Œ±) [ (Œ¥ ,! x) x‚ÇÅ ]-Var = {!!}
  (suc v , Œ±) [ _,‚üÆ_‚à£_‚üØ Œ¥ x ]-Var = {!!}

  _[_] : Œî ‚ä¢ A -> (Œ¥ : Œì ‚üº Œî) -> Œì ‚ä¢ A
  var x Œ± [ Œ¥ ] = (x , Œ±) [ Œ¥ ]-Var
  tt [ Œ¥ ] = tt
  mod t [ Œ¥ ] = {!!}
  letmod t t‚ÇÅ [ Œ¥ ] = {!!}
  lam t [ Œ¥ ] = {!!}
  app t t‚ÇÅ [ Œ¥ ] = {!!}



open import Agora.TypeTheory.Notation
