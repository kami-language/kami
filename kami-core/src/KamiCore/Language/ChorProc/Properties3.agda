
{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiCore.Language.ChorProc.Properties3 where

open import Data.List using (drop)

open import Agora.Conventions hiding (m ; n ; k ; _‚à£_ ; _‚äî_ ; ls)
open import Agora.Data.Product.Definition
open import Agora.Order.Preorder
open import Agora.Order.Lattice
open import Agora.Category.Std.Category.Definition
open import Agora.Category.Std.2Category.Definition
open import Agora.TypeTheory.STT.Definition
open import Agora.TypeTheory.ParamSTT.Definition

open import KamiTheory.Basics hiding (_‚ãÜ_)
open import KamiTheory.Order.StrictOrder.Base
open import KamiTheory.Data.UniqueSortedList.Definition
open import KamiTheory.Data.UniqueSortedList.NonEmpty
open import KamiTheory.Data.List.Definition
open import KamiTheory.Main.Generic.ModeSystem.2Graph.Definition renaming (_‚óÜ_ to _‚óÜ'_ ; id to id')
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Definition hiding (Mode)
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Instance.2Category

open import KamiCore.Language.ChorMTT.Definition
open import KamiCore.Language.ChorMTT.Properties
open import KamiCore.Language.ChorProc.Definition
open import KamiCore.Language.ChorProc.Properties
open import KamiCore.Language.ChorProc.Properties2



module Chorùîìroc/Properties3 (This : Chorùîìroc ùëó) where
  open Chorùîìroc/Definition This
  open [Chorùîìroc/Definition::Param]
  open [Chorùîìroc/Definition::Type]
  open [Chorùîìroc/Definition::Ctx]
  open [Chorùîìroc/Definition::Term]
  open Chorùîìroc/Properties This
  open Chorùîìroc/Properties2 This

  open ChorùîêTT/Definition Super
  open [ChorùîêTT/Definition::Type] renaming (‚ä¢Type to ChorùîêTT‚ä¢Type)
  open [ChorùîêTT/Definition::Ctx] renaming (‚ä¢Ctx to ChorùîêTT‚ä¢Ctx)
  open [ChorùîêTT/Definition::Term] renaming (_‚ä¢_ to _ChorùîêTT‚ä¢_)
  open ChorùîêTT/Properties Super

  lift-œÄ-single : ‚àÄ{X A p ps q} -> œÄ X ‚à£ p , ps ‚Ü¶ A Type -> œÄ ‚óª X Ôº† q ‚à£ q , (p ‚à∑ ps) ‚Ü¶ A Type
  lift-œÄ-single X = proj-Ôº† refl-‚â§ (proj-‚óª X)

  lift-œÄ-impl : ‚àÄ{X A p ps r} -> œÄ X ‚à£ r , [] ‚Ü¶ A Type -> œÄ F2-Type (p ‚à∑ ps) X ‚à£ p , ps <> (r ‚à∑ []) ‚Ü¶ A Type
  lift-œÄ-impl {ps = []} Xp = proj-Ôº† refl-‚â§ (proj-‚óª Xp)
  lift-œÄ-impl {ps = x ‚à∑ ps} Xp = lift-œÄ-single (lift-œÄ-impl Xp)

  lift-œÄ : ‚àÄ{X A ps qs r} -> ps ‚âº' qs -> œÄ X ‚à£ r , [] ‚Ü¶ A Type -> œÄ F2-Type ps X ‚à£ fst (postpend qs r) , drop 1 (ps <> (r ‚à∑ [])) ‚Ü¶ A Type
  lift-œÄ {qs = []} [] Xp = Xp
  lift-œÄ {qs = x ‚à∑ qs} (_‚à∑_ .x x‚ÇÅ) Xp = lift-œÄ-impl Xp

  lift-œÄ-direct : ‚àÄ{X B ps r} -> (œÄ X ‚à£ r , [] ‚Ü¶ B Type) -> œÄ F2-Type ps X ‚à£ fst (postpend ps r) , snd (postpend ps r) ‚Ü¶ B Type
  lift-œÄ-direct {X} {B} {ps} {r} p =
    let P = lift-œÄ id-‚âº' p
    in transp-‚â° (cong-‚â° (Œª Œæ -> œÄ F2-Type ps X ‚à£ fst (postpend ps r) , Œæ ‚Ü¶ B Type) (drop-post ps)) P


  mkVar : ‚àÄ{Œî X A r ps qs} -> ps ‚âº' qs -> œÄ X ‚à£ r , [] ‚Ü¶ A Type -> Œî , F2-Type ps X ‚ä¢Var A GlobalFiber[ cons (postpend qs r) ]
  mkVar {r = r} {ps} {qs} [] Xp = zero done Xp -- (lift-œÄ {ps = ps} {qs = qs} {r = r} P Xp)
  mkVar {r = r} {ps} {qs} (_‚à∑_ a {bs = bs} Ps) Xp = zero (add-element {zs = (r ‚à∑ [])} Ps ‚óÜ-‚âº‚â° drop-post (a ‚à∑ bs)) (lift-œÄ {ps = ps} {qs = qs} {r = r} (a ‚à∑ Ps) Xp)

  mkVar-‚ñ≤ : ‚àÄ{Œî A B U V r ps qs} -> (ps <> (U ‚à∑ [])) ‚âº' (qs <> (V ‚à∑ [])) -> œÄ A Ôº† V ‚à£ r , [] ‚Ü¶ B Type -> Œî , F2-Type ps (A Ôº† U) ‚ä¢Var B GlobalFiber[ cons (postpend qs r) ]
  mkVar-‚ñ≤ {ps = []} {qs = []} (_ ‚à∑ x) P = zero done P
  mkVar-‚ñ≤ {ps = []} {qs = x ‚à∑ qs} (.x ‚à∑ x‚ÇÅ) P with P
  ... | proj-Ôº† x‚ÇÇ done = zero []‚âº ( (proj-Ôº† refl-‚â§ done))
  ... | proj-Ôº†-‚â† x‚ÇÇ = none
  mkVar-‚ñ≤ {U = U} {V} {r = r} {ps = x ‚à∑ ps} {qs = .x ‚à∑ qs} (.x ‚à∑ x‚ÇÅ) P with split-‚âº ps qs x‚ÇÅ
  ... | no (Q , refl-‚â°) = zero (add-element-post Q) ( (proj-Ôº† refl-‚â§ (proj-‚óª (lift-œÄ-direct {ps = ps} P))))
  ... | yes Q with P
  ... | proj-Ôº† x‚ÇÇ done = zero ((cons-post ps _) ‚óÜ-‚â°‚âº ((Q ‚óÜ-‚âº Œπ‚ÇÄ-<> {bs = (r ‚à∑ [])}) ‚óÜ-‚âº‚â° sym-‚â° (cons-post qs _))) ( (proj-Ôº† refl-‚â§ (proj-‚óª (lift-œÄ-direct {ps = ps} (proj-Ôº† refl-‚â§ done)))))
  ... | proj-Ôº†-‚â† x‚ÇÇ = none
  mkVar-‚ñ≤ {U = U} {.x} {r = r} {ps = x ‚à∑ []} {qs = []} (.x ‚à∑ ()) P
  mkVar-‚ñ≤ {U = U} {.x} {r = r} {ps = x ‚à∑ x‚ÇÇ ‚à∑ ps} {qs = []} (.x ‚à∑ ()) P

  updateVar : ‚àÄ{X A B Œî p ps} -> œÄ X ‚à£ p , [] ‚Ü¶ B Type ->  Œî , X ‚ä¢Var A GlobalFiber[ p ‚à∑ ps ] -> Œî , B Ôº† p ‚ä¢Var A GlobalFiber[ p ‚à∑ ps ]
  updateVar P (zero x x‚ÇÅ) = zero x (lem-12 P x‚ÇÅ)
  updateVar P (suc v) = suc v
  updateVar P (none) = none


