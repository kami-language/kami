

{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiCore.Language.ChorProc.Properties where

open import Data.List using (drop)

open import Agora.Conventions hiding (m ; n ; k ; _‚à£_ ; _‚äî_ ; ls)
open import Agora.Data.Product.Definition
open import Agora.Order.Preorder
open import Agora.Order.Lattice
open import Agora.Category.Std.Category.Definition
open import Agora.Category.Std.2Category.Definition
open import Agora.TypeTheory.STT.Definition
open import Agora.TypeTheory.ParamSTT.Definition

open import KamiTheory.Basics hiding (_‚ãÜ_)
open import KamiTheory.Order.StrictOrder.Base
open import KamiTheory.Data.UniqueSortedList.Definition
open import KamiTheory.Data.UniqueSortedList.NonEmpty
open import KamiTheory.Data.UniqueSortedList.Properties
open import KamiTheory.Data.List.Definition
open import KamiTheory.Main.Generic.ModeSystem.2Graph.Definition renaming (_‚óÜ_ to _‚óÜ'_ ; id to id')
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Definition hiding (Mode)
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Instance.2Category

open import KamiCore.Language.ChorMTT.Definition
open import KamiCore.Language.ChorProc.Definition




module Chorùîìroc/Properties (This : Chorùîìroc ùëó) where
  open Chorùîìroc/Definition This
  open [Chorùîìroc/Definition::Param]
  open [Chorùîìroc/Definition::Type]
  open [Chorùîìroc/Definition::Ctx]
  open [Chorùîìroc/Definition::Term]

  --------------------------------------------------------------
  -- Operations on Types and contexts
  --------------------------------------------------------------

  -------------------
  -- Types

  F-Type : (a ‚ü∂ b) -> ‚ä¢Type ‚ü¶ a ‚üß-Mode -> ‚ä¢Type ‚ü¶ b ‚üß-Mode
  F-Type id' x = x
  F-Type (`Ôº†` U ‚®æ Œº) x = F-Type Œº (x Ôº† U)
  F-Type (`[]` ‚®æ Œº) x = F-Type Œº (‚óª x)

  F-Type-map : ‚àÄ{X : ‚ä¢Type ‚ü¶ a ‚üß-Mode} {Œº : a ‚ü∂ b} {ŒΩ : b ‚ü∂ c} -> F-Type (Œº ‚óÜ ŒΩ) X ‚â° F-Type ŒΩ (F-Type Œº X)
  F-Type-map {Œº = id'} = refl-‚â°
  F-Type-map {Œº = `Ôº†` U ‚®æ Œº} = F-Type-map {Œº = Œº}
  F-Type-map {Œº = `[]` ‚®æ Œº} = F-Type-map {Œº = Œº}

  -------------------
  -- Contexts

  TargetCtx : ProcMode -> ùí∞ _
  TargetCtx ‚ñ≤ = ‚ä¢Ctx √ó ‚ü® P ‚ü©
  TargetCtx ‚óØ = ‚ä¢Ctx

  addRestr : (Œº : a ‚ü∂ b) -> TargetCtx ‚ü¶ b ‚üß-Mode -> TargetCtx ‚ü¶ a ‚üß-Mode
  addRestr id' Œì = Œì
  addRestr (`Ôº†` U ‚®æ Œº) Œì = addRestr Œº Œì , U
  addRestr (`[]` ‚®æ Œº) Œì = let Œì' , U = addRestr Œº Œì in Œì' ,[ U ]


  forget : TargetCtx ‚ü¶ a ‚üß-Mode -> ‚ä¢Ctx
  forget {a = ‚óØ} Œì = Œì
  forget {a = ‚ñ≤ x} Œì = fst Œì

  cong-Ctx,Var : {A B : ‚ä¢Type ‚óØ} -> A ‚â° B -> _‚â°_ {A = ‚ä¢Ctx} (Œì , A) (Œì , B)
  cong-Ctx,Var refl-‚â° = refl-‚â°

  transp-Ctx-Var : ‚àÄ{ps} -> (Œì ‚â° Œî) -> Œì ‚ä¢Var A GlobalFiber[ ps ] -> Œî ‚ä¢Var A GlobalFiber[ ps ]
  transp-Ctx-Var refl-‚â° t = t

  --------------------------------------------------------------
  -- Proofs on Operations on Types and contexts
  --------------------------------------------------------------


  eval-F-type-right : F-Type (ŒΩ ‚óÜ' `Ôº†` V ‚®æ id') X ‚â° (F-Type ŒΩ X) Ôº† V
  eval-F-type-right {V = V} {ŒΩ = ŒΩ}  = F-Type-map {Œº = ŒΩ} {ŒΩ = `Ôº†` V ‚®æ id'}



  --------------------------------------------------------------
  -- Types and context projections
  --------------------------------------------------------------

  mutual
    œÄ-Type-Single : (X : ‚ä¢Type ‚óØ) -> ((‚ü® Proc This ‚ü©) √ó-ùí∞ List (ùí´‚Çä·∂†‚Å±‚Åø (Proc This))) -> ‚ä¢Type ‚ñ≤
    œÄ-Type-Single Unit ps = Unit
    œÄ-Type-Single (Either X Y) ps = Either (œÄ-Type-Single X ps) (œÄ-Type-Single Y ps)
    œÄ-Type-Single (X ‚áí Y) ps = œÄ-Type-Single X ps ‚áí œÄ-Type-Single Y ps
    œÄ-Type-Single (X √ó√ó Y)  ps = œÄ-Type-Single X ps √ó√ó œÄ-Type-Single Y ps
    œÄ-Type-Single (Tr X)  ps = Tr (œÄ-Type-Single X ps)
    œÄ-Type-Single (Lst X)  ps = Lst (œÄ-Type-Single X ps)
    œÄ-Type-Single (A Ôº† l) (p , ps) with decide-‚â§ ‚¶ó p ‚¶ò‚Çä l
    ... | no x = Unit
    ... | yes x = œâ-Type A ps

    œÄ-Type : (X : ‚ä¢Type ‚óØ) -> ((ùí´‚Çä·∂†‚Å±‚Åø (Proc This)) √ó-ùí∞ List (ùí´‚Çä·∂†‚Å±‚Åø (Proc This))) -> ‚ä¢Type ‚ñ≤
    œÄ-Type X ((([] since []) , rs) , ps) = ‚ä•-elim (rs refl-‚â°)
    œÄ-Type X (((p ‚à∑ [] since [-]) , rs), ps) = œÄ-Type-Single X (p , ps)
    œÄ-Type Unit ((((p ‚à∑ q ‚à∑ ps) since Ps) , rs) , qs) = Unit
    œÄ-Type (Either X X‚ÇÅ) ((((p ‚à∑ q ‚à∑ ps) since Ps) , rs) , qs) = Unit
    œÄ-Type (Lst X) ((((p ‚à∑ q ‚à∑ ps) since Ps) , rs) , qs) = Unit
    œÄ-Type (X ‚áí X‚ÇÅ) ((((p ‚à∑ q ‚à∑ ps) since Ps) , rs) , qs) = Unit
    œÄ-Type (X √ó√ó X‚ÇÅ) ((((p ‚à∑ q ‚à∑ ps) since Ps) , rs) , qs) = Unit
    œÄ-Type (Tr X) ((((p ‚à∑ q ‚à∑ ps) since Ps) , rs) , qs) = Unit
    œÄ-Type (A Ôº† l) (R@(((p ‚à∑ q ‚à∑ ps) since Ps) , rs) , qs) with decide-‚â§ R l
    ... | no x = Unit
    ... | yes x = œâ-Type A qs
{-
    œÄ-Type Unit ps = Unit
    œÄ-Type (Either X Y) ps = Either (œÄ-Type X ps) (œÄ-Type Y ps)
    œÄ-Type (X ‚áí Y) ps = œÄ-Type X ps ‚áí œÄ-Type Y ps
    œÄ-Type (X √ó√ó Y)  ps = œÄ-Type X ps √ó√ó œÄ-Type Y ps
    œÄ-Type (Tr X)  ps = Tr (œÄ-Type X ps)
    œÄ-Type (Lst X)  ps = Lst (œÄ-Type X ps)
    œÄ-Type (A Ôº† l) (p , ps) with decide-‚â§ p l
    ... | no x = Unit
    ... | yes x = œâ-Type A ps
    -}


    œâ-Type : (A : ‚ä¢Type ‚ñ≤) -> List (ùí´‚Çä·∂†‚Å±‚Åø (Proc This)) -> ‚ä¢Type ‚ñ≤
    œâ-Type A [] = A
    -- œâ-Type (‚óª X) (p ‚à∑ ps) = [ X ‚à£ p , ps ]‚óÖ œÄ-Type X (p , ps)
    œâ-Type (‚óª X) (p ‚à∑ ps) = œÄ-Type X (p , ps)
    œâ-Type Unit (p ‚à∑ ps) = Unit
    -- œâ-Type (Either T S)  (p ‚à∑ ps) = Unit
    -- œâ-Type (T ‚áí S) (p ‚à∑ ps) = Unit
    -- œâ-Type (T √ó√ó S) (p ‚à∑ ps) = Unit
    -- œâ-Type (Tr T) (p ‚à∑ ps) = Unit
    -- œâ-Type (Lst T) (p ‚à∑ ps) = Unit
    œâ-Type (Either T S)  (p ‚à∑ ps) = Either (œâ-Type T (p ‚à∑ ps)) (œâ-Type S (p ‚à∑ ps))
    œâ-Type (T ‚áí S) (p ‚à∑ ps) = _‚áí_ (œâ-Type T (p ‚à∑ ps)) (œâ-Type S (p ‚à∑ ps))
    œâ-Type (T √ó√ó S) (p ‚à∑ ps) = _√ó√ó_ (œâ-Type T (p ‚à∑ ps)) (œâ-Type S (p ‚à∑ ps))
    œâ-Type (Tr T) (p ‚à∑ ps) = Tr (œâ-Type T (p ‚à∑ ps))
    œâ-Type (Lst T) (p ‚à∑ ps) = Lst (œâ-Type T (p ‚à∑ ps))


  œÄ-Type-Single-Proof : (X : ‚ä¢Type ‚óØ) -> (p : ‚ü® (Proc This) ‚ü©) -> œÄ X ‚à£ ‚¶ó p ‚¶ò‚Çä , [] ‚Ü¶ (œÄ-Type X (‚¶ó p ‚¶ò‚Çä , [])) Type
  œÄ-Type-Single-Proof Unit ps = Unit
  œÄ-Type-Single-Proof (Either X Y) ps = Either (œÄ-Type-Single-Proof X ps) (œÄ-Type-Single-Proof Y ps)
  œÄ-Type-Single-Proof (X ‚áí Y) ps = œÄ-Type-Single-Proof X ps ‚áí œÄ-Type-Single-Proof Y ps
  œÄ-Type-Single-Proof (Tr X) ps = Tr (œÄ-Type-Single-Proof X ps)
  œÄ-Type-Single-Proof (Lst X) ps = Lst (œÄ-Type-Single-Proof X ps)
  œÄ-Type-Single-Proof (A Ôº† l) p with decide-‚â§ ‚¶ó p ‚¶ò‚Çä l
  ... | no x = proj-Ôº†-‚â† x
  ... | yes x = proj-Ôº† x done
  œÄ-Type-Single-Proof (X √ó√ó Y) ps = _√ó√ó_ (œÄ-Type-Single-Proof X ps) (œÄ-Type-Single-Proof Y ps)

  œÄ-Type-Proof : (X : ‚ä¢Type ‚óØ) -> (ps : (ùí´‚Çä·∂†‚Å±‚Åø (Proc This))) -> œÄ X ‚à£ ps , [] ‚Ü¶ (œÄ-Type X (ps , [])) Type
  œÄ-Type-Proof X (([] since []) , rs) = ‚ä•-elim (rs refl-‚â°)
  œÄ-Type-Proof X ((p ‚à∑ [] since [-]) , rs) = œÄ-Type-Single-Proof X p
  œÄ-Type-Proof Unit (((p ‚à∑ q ‚à∑ ps) since Ps) , rs) = break-œÄ is-Unit
  œÄ-Type-Proof (Either X X‚ÇÅ) (((p ‚à∑ q ‚à∑ ps) since Ps) , rs) =  break-œÄ Chorùîìroc/Definition.[Chorùîìroc/Definition::Type].is-Either
  œÄ-Type-Proof (Lst X) (((p ‚à∑ q ‚à∑ ps) since Ps) , rs) = Chorùîìroc/Definition.[Chorùîìroc/Definition::Type].break-œÄ Chorùîìroc/Definition.[Chorùîìroc/Definition::Type].is-Lst
  œÄ-Type-Proof (X ‚áí X‚ÇÅ) (((p ‚à∑ q ‚à∑ ps) since Ps) , rs) = Chorùîìroc/Definition.[Chorùîìroc/Definition::Type].break-œÄ Chorùîìroc/Definition.[Chorùîìroc/Definition::Type].is-‚áí
  œÄ-Type-Proof (X √ó√ó X‚ÇÅ) (((p ‚à∑ q ‚à∑ ps) since Ps) , rs) = Chorùîìroc/Definition.[Chorùîìroc/Definition::Type].break-œÄ Chorùîìroc/Definition.[Chorùîìroc/Definition::Type].is-√ó√ó
  œÄ-Type-Proof (Tr X) (((p ‚à∑ q ‚à∑ ps) since Ps) , rs) = Chorùîìroc/Definition.[Chorùîìroc/Definition::Type].break-œÄ Chorùîìroc/Definition.[Chorùîìroc/Definition::Type].is-Tr
  œÄ-Type-Proof (A Ôº† l) R@(((p ‚à∑ q ‚à∑ ps) since Ps) , rs) with decide-‚â§ R l
  ... | no x = proj-Ôº†-‚â† x
  ... | yes x = proj-Ôº† x done


{-
  unique-œÄ : ‚àÄ{X A B ps} -> œÄ X ‚à£ ps , [] ‚Ü¶ A Type -> œÄ X ‚à£ ps , [] ‚Ü¶ B Type -> A ‚â° B
  unique-œÄ (proj-Ôº† x done) (proj-Ôº† x‚ÇÇ done) = refl-‚â°
  unique-œÄ (proj-Ôº† x done) (proj-Ôº†-‚â† x‚ÇÇ) = ‚ä•-elim (x‚ÇÇ x) -- ‚ä•-elim (x‚ÇÇ x)
  unique-œÄ (proj-Ôº†-‚â† x) (proj-Ôº† x‚ÇÅ done) = ‚ä•-elim (x x‚ÇÅ) -- ‚ä•-elim (x x‚ÇÅ)
  unique-œÄ (proj-Ôº†-‚â† x) (proj-Ôº†-‚â† x‚ÇÅ) = refl-‚â°
  unique-œÄ (p ‚áí p‚ÇÅ) (q ‚áí q‚ÇÅ) = cong‚ÇÇ-‚â° _‚áí_ (unique-œÄ p q) (unique-œÄ p‚ÇÅ q‚ÇÅ)
  unique-œÄ (p √ó√ó p‚ÇÅ) (q √ó√ó q‚ÇÅ) = cong‚ÇÇ-‚â° _√ó√ó_ (unique-œÄ p q) (unique-œÄ p‚ÇÅ q‚ÇÅ)
  unique-œÄ (Either p p‚ÇÅ) (Either q q‚ÇÅ) = cong‚ÇÇ-‚â° Either (unique-œÄ p q) (unique-œÄ p‚ÇÅ q‚ÇÅ)
  unique-œÄ (Tr p) (Tr q) = cong-‚â° Tr (unique-œÄ p q)
  unique-œÄ (Lst p) (Lst q) = cong-‚â° Lst (unique-œÄ p q)
  unique-œÄ Unit Unit = refl-‚â°
  unique-œÄ (break-œÄ X) (break-œÄ Y) = refl-‚â°


  Œ≥-Type : (X : ‚ä¢Type ‚óØ) -> ((ùí´‚Çä·∂†‚Å±‚Åø (Proc This)) √ó-ùí∞ List (ùí´‚Çä·∂†‚Å±‚Åø (Proc This))) -> ‚ä¢Type ‚ñ≤
  Œ≥-Type X (p , []) = œÄ-Type X (p , [])
  Œ≥-Type (Unit) (p , (r ‚à∑ rs)) = Unit
  Œ≥-Type (Either X Y) (p , (r ‚à∑ rs)) = Unit
  Œ≥-Type (X ‚áí Y) (p , (r ‚à∑ rs)) = Unit
  Œ≥-Type (X √ó√ó Y)  (p , (r ‚à∑ rs)) = Unit
  Œ≥-Type (Tr X)  (p , (r ‚à∑ rs)) = Unit
  Œ≥-Type (Lst X)  (p , (r ‚à∑ rs)) = Unit
  Œ≥-Type (A Ôº† l) (p , (r ‚à∑ rs)) with decide-‚â§ p l
  ... | no x = Unit
  ... | yes x = A

  Œ≥-Type-Proof : (X : ‚ä¢Type ‚óØ) -> ‚àÄ pps -> Œ≥ X ‚à£ pps ‚Ü¶ (Œ≥-Type X pps) Type
  Œ≥-Type-Proof X (p , []) = toplevel (œÄ-Type-Proof X p)
  Œ≥-Type-Proof Unit (p , (pp ‚à∑ pps)) = sublevel-break (is-Unit)
  Œ≥-Type-Proof (Either X X‚ÇÅ) (p , (pp ‚à∑ pps)) = sublevel-break (is-Either)
  Œ≥-Type-Proof (Lst X) (p , (pp ‚à∑ pps)) = sublevel-break (is-Lst)
  Œ≥-Type-Proof (X ‚áí X‚ÇÅ) (p , (pp ‚à∑ pps)) = sublevel-break (is-‚áí)
  Œ≥-Type-Proof (X √ó√ó X‚ÇÅ) (p , (pp ‚à∑ pps)) = sublevel-break (is-√ó√ó)
  Œ≥-Type-Proof (Tr X) (p , (pp ‚à∑ pps)) = sublevel-break (is-Tr)
  Œ≥-Type-Proof (X Ôº† l) (p , (pp ‚à∑ pps)) with decide-‚â§ p l
  ... | no x = sublevel-Ôº†-‚â† x
  ... | yes x = sublevel-Ôº† x

  singleton-‚â§-‚â° : ‚àÄ{qs : ùí´‚Çä·∂†‚Å±‚Åø (Proc This)} -> ‚àÄ{p} -> qs ‚â§-ùí´‚Çä·∂†‚Å±‚Åø ‚¶ó p ‚¶ò‚Çä -> qs ‚â° (‚¶ó_‚¶ò‚Çä p )
  singleton-‚â§-‚â° = {!!}

  -- replaceIn-œÄS pp (proj-Ôº† x x‚ÇÅ) = yes $ proj-Ôº† (pp ‚ü° x) x‚ÇÅ
  -- replaceIn-œÄS pp (proj-Ôº†-‚â† x) = no refl-‚â°
  -- replaceIn-œÄS pp (break-œÄ x) = yes $ break-œÄ x

  replaceIn-œÄ : ‚àÄ{rs qs ps} -> qs ‚â§ rs -> œÄ X ‚à£ rs , ps ‚Ü¶ B Type -> (B ‚â° Unit) +-ùí∞ œÄ X ‚à£ qs , ps ‚Ü¶ B Type
  replaceIn-œÄ pp (proj-Ôº† x x‚ÇÅ) = yes $ proj-Ôº† (pp ‚ü° x) x‚ÇÅ
  replaceIn-œÄ pp (proj-Ôº†-‚â† x) = no refl-‚â°
  replaceIn-œÄ pp (P‚ÇÅ ‚áí P‚ÇÇ) with singleton-‚â§-‚â° pp
  ... | refl-‚â° = yes (P‚ÇÅ ‚áí P‚ÇÇ)
  replaceIn-œÄ pp (P‚ÇÅ √ó√ó P‚ÇÇ) with singleton-‚â§-‚â° pp
  ... | refl-‚â° = yes (P‚ÇÅ √ó√ó P‚ÇÇ)
  replaceIn-œÄ pp (Either P‚ÇÅ P‚ÇÇ) with singleton-‚â§-‚â° pp
  ... | refl-‚â° = yes (Either P‚ÇÅ P‚ÇÇ)
  replaceIn-œÄ pp (Tr P‚ÇÅ) with singleton-‚â§-‚â° pp
  ... | refl-‚â° = yes (Tr P‚ÇÅ)
  replaceIn-œÄ pp (Lst P‚ÇÅ) with singleton-‚â§-‚â° pp
  ... | refl-‚â° = yes (Lst P‚ÇÅ)
  replaceIn-œÄ pp Unit with singleton-‚â§-‚â° pp
  ... | refl-‚â° = yes Unit
  replaceIn-œÄ pp (break-œÄ x) = no refl-‚â°


  drop-Œ≥-impl : ‚àÄ{p ps n} -> Œ≥ X ‚à£ (p , ps) ‚Ü¶ A Type -> Œ≥ X ‚à£ (p , ps <> (n ‚à∑ [])) ‚Ü¶ B Type -> (B ‚â° Unit) +-ùí∞ (A ‚â° B)
  drop-Œ≥-impl (toplevel (proj-Ôº† x done)) (sublevel-Ôº† x‚ÇÅ) = yes refl-‚â°
  drop-Œ≥-impl (toplevel (proj-Ôº†-‚â† x)) (sublevel-Ôº† x‚ÇÅ) = ‚ä•-elim (x x‚ÇÅ)
  drop-Œ≥-impl (toplevel (break-œÄ ())) (sublevel-Ôº† x‚ÇÅ)
  drop-Œ≥-impl (toplevel x) (sublevel-Ôº†-‚â† x‚ÇÅ) = no refl-‚â°
  drop-Œ≥-impl (toplevel x) (sublevel-break x‚ÇÅ) = no refl-‚â°
  drop-Œ≥-impl (sublevel-Ôº† x) (sublevel-Ôº† x‚ÇÅ) = yes refl-‚â°
  drop-Œ≥-impl (sublevel-Ôº† x) (sublevel-Ôº†-‚â† x‚ÇÅ) = ‚ä•-elim (x‚ÇÅ x)
  drop-Œ≥-impl (sublevel-Ôº†-‚â† x) (sublevel-Ôº† x‚ÇÅ) = ‚ä•-elim (x x‚ÇÅ)
  drop-Œ≥-impl (sublevel-Ôº†-‚â† x) (sublevel-Ôº†-‚â† x‚ÇÅ) = yes refl-‚â°
  drop-Œ≥-impl (sublevel-break x) (sublevel-break x‚ÇÅ) = yes refl-‚â°

  drop-Œ≥ : ‚àÄ{p ps n} -> (Œ≥-Type X (p , ps <> (n ‚à∑ [])) ‚â° Unit) +-ùí∞ (Œ≥-Type X (p , ps) ‚â° Œ≥-Type X (p , (ps <> (n ‚à∑ [])))) 
  drop-Œ≥ {X = X} {p} {ps} {n} = drop-Œ≥-impl (Œ≥-Type-Proof X (p , ps)) ((Œ≥-Type-Proof X (p , ps <> (n ‚à∑ []))))

{-
  eval-œÄ-Ôº† : œÄ-Type (A Ôº† ps) (ps , []) ‚â° A
  eval-œÄ-Ôº† {A = A} {ps = ps} with decide-‚â§ ps ps
  ... | yes X = refl-‚â°
  ... | no X = ‚ä•-elim ({!!})
  -}

  eval-Œ≥-Ôº† : ‚àÄ{pps} -> Œ≥-Type (A Ôº† ps) (ps , pps) ‚â° A
  eval-Œ≥-Ôº† {A = A} {ps = ps} {pps = p ‚à∑ pps} with decide-‚â§ ps ps
  ... | yes X = refl-‚â°
  ... | no X = ‚ä•-elim (X refl-‚â§)
  eval-Œ≥-Ôº† {A = A} {ps = ps} {pps = []} with decide-‚â§ ps ps
  ... | yes X = ? -- refl-‚â°
  ... | no X = ‚ä•-elim (X refl-‚â§)

{-
  mutual
    œÄ-Type-Proof : (X : ‚ä¢Type ‚óØ) -> (ps : (ùí´‚Çä·∂†‚Å±‚Åø (Proc This)) √ó-ùí∞ List (ùí´‚Çä·∂†‚Å±‚Åø (Proc This))) -> œÄ X ‚à£ ps ‚Ü¶ œÄ-Type X ps Type
    œÄ-Type-Proof Unit ps = Unit
    œÄ-Type-Proof (Either X Y) ps = Either (œÄ-Type-Proof X ps) (œÄ-Type-Proof Y ps)
    œÄ-Type-Proof (X ‚áí Y) ps = œÄ-Type-Proof X ps ‚áí œÄ-Type-Proof Y ps
    œÄ-Type-Proof (Tr X) ps = Tr (œÄ-Type-Proof X ps)
    œÄ-Type-Proof (Lst X) ps = Lst (œÄ-Type-Proof X ps)
    œÄ-Type-Proof (A Ôº† l) (p , ps) with decide-‚â§ p l
    ... | no x = proj-Ôº†-‚â† x
    ... | yes x = proj-Ôº† x (œâ-Type-Proof A ps)
    œÄ-Type-Proof (X √ó√ó Y) ps = _√ó√ó_ (œÄ-Type-Proof X ps) (œÄ-Type-Proof Y ps)

    œâ-Type-Proof : (A : ‚ä¢Type ‚ñ≤) -> (ps : List (ùí´‚Çä·∂†‚Å±‚Åø (Proc This))) -> œâ A ‚à£ ps ‚Ü¶ œâ-Type A ps Type
    œâ-Type-Proof A [] = done
    œâ-Type-Proof (‚óª X) (p ‚à∑ ps) = proj-‚óª (œÄ-Type-Proof X (p , ps))
    œâ-Type-Proof Unit (p ‚à∑ ps) = Unit
    œâ-Type-Proof (Either T S)  (p ‚à∑ ps) = {!!}
    œâ-Type-Proof (T ‚áí S) (p ‚à∑ ps) = {!!}
    œâ-Type-Proof (T √ó√ó S) (p ‚à∑ ps) = œâ-Type-Proof T (p ‚à∑ ps) √ó√ó œâ-Type-Proof S (p ‚à∑ ps)
    œâ-Type-Proof (Tr T) (p ‚à∑ ps) = {!!}
    œâ-Type-Proof (Lst T) (p ‚à∑ ps) = {!!}

-}

  œÄ-Ctx : ‚ä¢Ctx -> List (ùí´‚Çä·∂†‚Å±‚Åø (Proc This)) -> ‚ä¢Ctx
  œÄ-Ctx Œì [] = Œì
  œÄ-Ctx Œµ (i ‚à∑ is) = Œµ
  œÄ-Ctx (Œì ,[ x ]) (i ‚à∑ is) = œÄ-Ctx Œì (x ‚à∑ i ‚à∑ is) ,[ x ]
  œÄ-Ctx (Œì , x) (i ‚à∑ is) = œÄ-Ctx Œì (i ‚à∑ is) , Œ≥-Type x (i , is) Ôº† i

  local-Proof : ‚àÄ {Œì Œî p ps} -> Œì ‚à£ p ‚à∑ ps ‚Ü¶ Œî Ctx -> isLocal p Œî
  local-Proof Œµ = Œµ
  local-Proof (p , x) = (local-Proof p) , _
  local-Proof (stepRes p) = stepRes (local-Proof p)

  œÄ-Ctx-Proof : (Œì : ‚ä¢Ctx) -> (i : List (ùí´‚Çä·∂†‚Å±‚Åø (Proc This))) -> Œì ‚à£ i ‚Ü¶ œÄ-Ctx Œì i Ctx
  œÄ-Ctx-Proof Œì [] = done
  œÄ-Ctx-Proof Œµ (i ‚à∑ is) = Œµ
  œÄ-Ctx-Proof (Œì ,[ x ]) (i ‚à∑ is) = stepRes (œÄ-Ctx-Proof Œì (x ‚à∑ i ‚à∑ is)) 
  œÄ-Ctx-Proof (Œì , x) (i ‚à∑ is) = œÄ-Ctx-Proof Œì (i ‚à∑ is) , Œ≥-Type-Proof x (i , is)



  data _‚â°-Local_ {ps} : {Œì Œî : ‚ä¢Ctx} (Œìp : isLocal ps Œì) (Œîp : isLocal ps Œî) -> ùí∞ ùëó where
    refl-Local : ‚àÄ{Œì} {Œìp : isLocal ps Œì} -> Œìp ‚â°-Local Œìp

  map-,Local : {Œì Œî : ‚ä¢Ctx} (Œìp : isLocal ps Œì) (Œîp : isLocal ps Œî)
             -> Œìp ‚â°-Local Œîp -> A ‚â° B -> Œìp , A ‚â°-Local Œîp , B
  map-,Local _ _ refl-Local refl-‚â° = refl-Local

  map-stepRes : {Œì Œî : ‚ä¢Ctx} (Œìp : isLocal ps Œì) (Œîp : isLocal ps Œî)
             -> Œìp ‚â°-Local Œîp -> ‚àÄ{q} -> stepRes {k = q} Œìp ‚â°-Local stepRes {k = q} Œîp
  map-stepRes _ _ refl-Local = refl-Local



{-
  idempotent-local : ‚àÄ{Œî : ‚ä¢Ctx} -> ‚àÄ{pps} -> (Œîp : isLocal ps Œî) -> local-Proof (œÄ-Ctx-Proof Œî (ps ‚à∑ pps)) ‚â°-Local Œîp
  idempotent-local Œµ = refl-Local
  idempotent-local {ps = ps} (Œîp , A) = map-,Local _ _ (idempotent-local Œîp) {!!}
  -- (eval-Œ≥-Ôº† {ps = ps})
  idempotent-local (stepRes Œîp) = map-stepRes _ _ (idempotent-local Œîp)
  -}



  idempotent-local' : ‚àÄ{Œî Œî‚Çó : ‚ä¢Ctx} -> ‚àÄ{pps} -> (Œîp : isLocal ps Œî) -> Œî ‚à£ (ps ‚à∑ pps) ‚Ü¶ Œî‚Çó Ctx -> Œî ‚â° Œî‚Çó
  idempotent-local' Œµ Œµ = refl-‚â°
  idempotent-local' (Œîp , A) (P‚ÇÅ , toplevel (proj-Ôº† x done)) = cong‚ÇÇ-‚â° _,_ (idempotent-local' Œîp P‚ÇÅ) refl-‚â°
  idempotent-local' (Œîp , A) (P‚ÇÅ , toplevel (proj-Ôº†-‚â† x)) = ‚ä•-elim (x refl-‚â§)
  idempotent-local' (Œîp , A) (P‚ÇÅ , sublevel-Ôº† x) = cong‚ÇÇ-‚â° _,_ (idempotent-local' Œîp P‚ÇÅ) refl-‚â°
  idempotent-local' (Œîp , A) (P‚ÇÅ , sublevel-Ôº†-‚â† x) = ‚ä•-elim (x refl-‚â§)
  idempotent-local' (stepRes Œîp) (stepRes P‚ÇÅ) = cong-‚â° (_,[ _ ]) (idempotent-local' Œîp P‚ÇÅ)









{-
  unique-œÄ-Ctx : ‚àÄ{Œì Œî‚ÇÄ Œî‚ÇÅ p ps qs} -> Œì ‚à£ p ‚à∑ ps ‚Ü¶ Œî‚ÇÄ Ctx -> Œì ‚à£ p ‚à∑ qs ‚Ü¶ Œî‚ÇÅ Ctx -> Œî‚ÇÄ ‚â° Œî‚ÇÅ
  unique-œÄ-Ctx Œµ Œµ = refl-‚â°
  unique-œÄ-Ctx (P‚ÇÅ , x) (Q , x‚ÇÅ) = {!!} --  with unique-œÄ x x‚ÇÅ
  -- ... | refl-‚â° = cong-‚â° (_, _) (unique-œÄ-Ctx P‚ÇÅ Q)
  unique-œÄ-Ctx (stepRes P‚ÇÅ) (stepRes Q) = cong-‚â° (_,[ _ ]) (unique-œÄ-Ctx P‚ÇÅ Q)
  -}

{-
  unique-œÄ-Ctx-‚â§ : ‚àÄ{Œì Œî‚ÇÄ Œî‚ÇÅ p ps q qs} -> q ‚â§ p -> Œì ‚à£ p ‚à∑ ps ‚Ü¶ Œî‚ÇÄ Ctx -> Œì ‚à£ q ‚à∑ qs ‚Ü¶ Œî‚ÇÅ Ctx -> Œî‚ÇÄ ‚à£ q ‚à∑ [] ‚Ü¶ Œî‚ÇÅ Ctx
  unique-œÄ-Ctx-‚â§ pp Œµ Œµ = Œµ
  unique-œÄ-Ctx-‚â§ pp (P‚ÇÅ , x) (Q , x‚ÇÅ) = {!!} , {!!}
  unique-œÄ-Ctx-‚â§ pp (stepRes P‚ÇÅ) (stepRes Q) = {!!}
  -}







  --------------------------------------------------------------
  -- Properties of variables
  --------------------------------------------------------------


  lem-14 : ‚àÄ{p ps} -> œÄ X ‚à£ p , [] ‚Ü¶ A Type -> œÄ X ‚à£ p , ps ‚Ü¶ B Type -> œâ A ‚à£ ps ‚Ü¶ B Type
  lem-14 (proj-Ôº† x done) (proj-Ôº† x‚ÇÇ x‚ÇÉ) = x‚ÇÉ
  lem-14 (proj-Ôº† x done) (proj-Ôº†-‚â† x‚ÇÇ) = ‚ä•-elim (x‚ÇÇ x) -- ‚ä•-elim (x‚ÇÇ x)
  lem-14 (proj-Ôº†-‚â† x) (proj-Ôº† x‚ÇÇ x‚ÇÉ) = ‚ä•-elim (x x‚ÇÇ) -- ‚ä•-elim (x x‚ÇÇ)
  lem-14 {ps = []} (proj-Ôº†-‚â† x) (proj-Ôº†-‚â† x‚ÇÅ) = done
  lem-14 {ps = _ ‚à∑ _} (proj-Ôº†-‚â† x) (proj-Ôº†-‚â† x‚ÇÅ) = Unit
  lem-14 (v ‚áí v‚ÇÅ) (w ‚áí w‚ÇÅ) with unique-œÄ v w | unique-œÄ v‚ÇÅ w‚ÇÅ
  ... | refl-‚â° | refl-‚â° = done
  lem-14 (v √ó√ó v‚ÇÅ) (w √ó√ó w‚ÇÅ) with unique-œÄ v w | unique-œÄ v‚ÇÅ w‚ÇÅ
  ... | refl-‚â° | refl-‚â° = done
  lem-14 (Either v v‚ÇÅ) (Either w w‚ÇÅ) with unique-œÄ v w | unique-œÄ v‚ÇÅ w‚ÇÅ
  ... | refl-‚â° | refl-‚â° = done
  lem-14 (Tr v) (Tr w) with unique-œÄ v w
  ... | refl-‚â° = done
  lem-14 (Lst v) (Lst w) with unique-œÄ v w
  ... | refl-‚â° = done
  lem-14 Unit Unit = done
  lem-14 (break-œÄ X) (break-œÄ Y) = done


  lem-12 : ‚àÄ{p ps} -> œÄ X ‚à£ p , [] ‚Ü¶ A Type -> œÄ X ‚à£ p , ps ‚Ü¶ B Type -> œÄ (A Ôº† p) ‚à£ p , ps ‚Ü¶ B Type
  lem-12 v w = proj-Ôº† refl-‚â§ (lem-14 v w)




-- NOTE: Probably we don't need this anymore
{-

  projVar1 : ‚àÄ{ps qs} -> Œì ‚à£ ps ‚Ü¶ Œî Ctx -> Œì ‚ä¢Var A GlobalFiber[ ps <> qs ] -> Œî ‚ä¢Var A GlobalFiber[ ps <> qs ]
  projVar1 done v = v
  projVar1 (p , v) (none) = none
  -- projVar1 (p , v) (zero x w) = zero x (lem-12 v w )
  projVar1 (p , v) (zero x w) = zero x {!!} -- (lem-12 v w )
  projVar1 (p , x) (suc v) = suc (projVar1 p v)
  projVar1 (stepRes p) (res v) = res (projVar1 p v)

  projVar3 : ‚àÄ{p qs} -> Œì ‚à£ p ‚à∑ [] ‚Ü¶ Œî Ctx -> Œì ,[ p ] ‚ä¢Var A GlobalFiber[ qs ] -> Œî ,[ p ] ‚ä¢Var A GlobalFiber[ qs ]
  projVar3 p (res v) with projVar1 p (v)
  ... | (w) = res w

-}



  --------------------------------------------------------------
  -- Generic term constructions of the ChorProc calculus
  --------------------------------------------------------------
  --
  commute‚Åª¬π-Ôº†-Exp : ‚àÄ ps -> Œì ‚ä¢ ((A Ôº† ps) ‚áí (B Ôº† ps)) GlobalFibered[ qs ] -> Œì ‚ä¢ (A ‚áí B) Ôº† ps GlobalFibered[ qs ]
  ‚ü® commute‚Åª¬π-Ôº†-Exp ps t ‚ü© q q‚ààqs (proj-Ôº† q‚ààps done) Œìp =
    let t' = (‚ü® t ‚ü© q q‚ààqs (proj-Ôº† q‚ààps done ‚áí proj-Ôº† q‚ààps done) Œìp)
    in t'
  ‚ü® commute‚Åª¬π-Ôº†-Exp ps t ‚ü© q q‚ààqs (proj-Ôº†-‚â† x) Œìp = tt


  commute-Ôº†-Exp : ‚àÄ ps -> Œì ‚ä¢ (A ‚áí B) Ôº† ps GlobalFibered[ qs ]
                        -> Œì ‚ä¢ ((A Ôº† ps) ‚áí (B Ôº† ps)) GlobalFibered[ qs ]
  ‚ü® commute-Ôº†-Exp ps t ‚ü© p x (proj-Ôº† x‚ÇÅ done ‚áí proj-Ôº† x‚ÇÉ done) Œìp = ‚ü® t ‚ü© _ x (proj-Ôº† x‚ÇÅ done) Œìp
  ‚ü® commute-Ôº†-Exp ps t ‚ü© p x (proj-Ôº† x‚ÇÅ done ‚áí proj-Ôº†-‚â† x‚ÇÉ) Œìp = ‚ä•-elim (x‚ÇÉ x‚ÇÅ) -- ‚ä•-elim (x‚ÇÉ x‚ÇÅ)
  ‚ü® commute-Ôº†-Exp ps t ‚ü© p x (proj-Ôº†-‚â† x‚ÇÅ ‚áí proj-Ôº† x‚ÇÇ done) Œìp = ‚ä•-elim (x‚ÇÅ x‚ÇÇ) -- ‚ä•-elim (x‚ÇÅ x‚ÇÇ)
  ‚ü® commute-Ôº†-Exp ps t ‚ü© p x (proj-Ôº†-‚â† x‚ÇÅ ‚áí proj-Ôº†-‚â† x‚ÇÇ) Œìp = lam tt


  map-Var-Fiber : ‚àÄ {p} -> isLocal ‚¶ó p ‚¶ò‚Çä Œî -> isLocal ‚¶ó p ‚¶ò‚Çä Œì -> (‚àÄ{A qs} -> Œì ‚ä¢Var A GlobalFiber[ ‚¶ó p ‚¶ò‚Çä ‚à∑ qs ] -> Œî ‚ä¢Var A GlobalFiber[ ‚¶ó p ‚¶ò‚Çä ‚à∑ qs ]) -> Œì ‚ä¢ B GlobalFiber[ p ] -> Œî ‚ä¢ B GlobalFiber[ p  ]

  map-Var : (‚àÄ{q A Œì‚Çó Œî‚Çó qs} -> q ‚àà ‚ü® fst ps ‚ü© -> Œì ‚à£ (‚¶ó q ‚¶ò‚Çä ‚à∑ []) ‚Ü¶ Œì‚Çó Ctx -> Œî ‚à£ (‚¶ó q ‚¶ò‚Çä ‚à∑ []) ‚Ü¶ Œî‚Çó Ctx -> Œì‚Çó ‚ä¢Var A GlobalFiber[ ‚¶ó q ‚¶ò‚Çä ‚à∑ qs ] -> Œî‚Çó ‚ä¢Var A GlobalFiber[ ‚¶ó q ‚¶ò‚Çä ‚à∑ qs ])
            -> Œì ‚ä¢ X GlobalFibered[ ps ] -> Œî ‚ä¢ X GlobalFibered[ ps ]

  map-Var-Fiber Œîp Œìp V (var v) = var (V v)
  map-Var-Fiber Œîp Œìp V (recv x) = recv x
  map-Var-Fiber Œîp Œìp V (send v t) = send v (map-Var-Fiber Œîp Œìp V t)
  map-Var-Fiber Œîp Œìp V (box' x) = box' (map-Var (Œª {q‚ààps (stepRes Œìproj) (stepRes Œîproj) (res v) ‚Üí res (transp-Ctx-Var ((idempotent-local' Œîp Œîproj)) (V (transp-Ctx-Var (sym-‚â° (idempotent-local' Œìp Œìproj)) v)))}) x)
  map-Var-Fiber Œîp Œìp V (pure t) = pure (map-Var-Fiber Œîp Œìp V t)
  map-Var-Fiber Œîp Œìp V (seq t s) =
    let t' = map-Var-Fiber Œîp Œìp V t
        s' = map-Var-Fiber (Œîp , _) (Œìp , _) (Œª {(suc v) -> suc (V v)
                              ; none -> none
                              ; (zero v w) -> (zero v w)}) s
    in seq t' s'
  map-Var-Fiber Œîp Œìp V (lam t) =
    let t' = map-Var-Fiber (Œîp , _) (Œìp , _) (Œª {(suc v) -> suc (V v)
                              ; none -> none
                              ; (zero v w) -> (zero v w)}) t
    in lam t'
  map-Var-Fiber Œîp Œìp V (app t s) =
    let t' = map-Var-Fiber Œîp Œìp V t
        s' = map-Var-Fiber Œîp Œìp V s
    in app t' s'
  map-Var-Fiber Œîp Œìp V tt = tt
  map-Var-Fiber Œîp Œìp V (left t) =
    let t' = map-Var-Fiber Œîp Œìp V t
    in left t'
  map-Var-Fiber Œîp Œìp V (right t) =
    let t' = map-Var-Fiber Œîp Œìp V t
    in right t'
  map-Var-Fiber Œîp Œìp V (either t s u) =
    let t' = map-Var-Fiber Œîp Œìp V t
        s' = map-Var-Fiber (Œîp , _) (Œìp , _) (Œª {(suc v) -> suc (V v)
                              ; none -> none
                              ; (zero v w) -> (zero v w)}) s
        u' = map-Var-Fiber (Œîp , _) (Œìp , _) (Œª {(suc v) -> suc (V v)
                              ; none -> none
                              ; (zero v w) -> (zero v w)}) u
    in either t' s' u'
  map-Var-Fiber Œîp Œìp V [] = []
  map-Var-Fiber Œîp Œìp V (t ‚à∑ s) =
    let t' = map-Var-Fiber Œîp Œìp V t
        s' = map-Var-Fiber Œîp Œìp V s
    in t' ‚à∑ s'
  map-Var-Fiber Œîp Œìp V (rec-Lst t s u) =
    let t' = map-Var-Fiber Œîp Œìp V t
        s' = map-Var-Fiber Œîp Œìp V s
        u' = map-Var-Fiber ((Œîp , _) , _) ((Œìp , _) , _) (Œª {(suc (suc v)) -> suc (suc (V v))
                              ; none -> none
                              ; (suc (zero v w)) -> (suc (zero v w))
                              ; (suc none) -> (suc none)
                              ; (zero v w) -> (zero v w)}) u
    in rec-Lst t' s' u'


  ‚ü® map-Var {Œì = Œì} V (incl t) ‚ü© p x Xp Œìp = map-Var-Fiber (local-Proof Œìp) (local-Proof (œÄ-Ctx-Proof Œì _)) (Œª v‚Çó -> V x (œÄ-Ctx-Proof Œì (‚¶ó p ‚¶ò‚Çä ‚à∑ _)) Œìp v‚Çó ) (t p x Xp ((œÄ-Ctx-Proof Œì (‚¶ó p ‚¶ò‚Çä ‚à∑ _))))


  -- map-Var' : ‚àÄ{p} -> isLocal p Œì -> isLocal p Œî -> (‚àÄ{A qs} -> Œì ‚ä¢Var A GlobalFiber[ p ‚à∑ qs ] -> Œî ‚ä¢Var A GlobalFiber[ p ‚à∑ qs ])
  --           -> Œì ‚ä¢ X GlobalFibered[ ps ] -> Œî ‚ä¢ X GlobalFibered[ ps ]
  -- map-Var' = {!!}

  -- resVar : ‚àÄ{qs rs ps ps'} -> rs ‚â§ qs -> Œì ‚ä¢Var A GlobalFiber[ ps <> (qs ‚à∑ ps') ] -> Œì ‚ä¢Var A GlobalFiber[ ps <> (rs ‚à∑ ps') ]
  -- resVar {ps = []} pp (zero x x‚ÇÅ) = {!!}
  -- resVar {ps = []} pp (suc v) = {!!}
  -- resVar {ps = []} pp (res v) = {!!}
  -- resVar {ps = []} pp none = {!!}
  -- resVar {ps = p ‚à∑ ps} pp (zero x x‚ÇÅ) = {!!}
  -- resVar {ps = p ‚à∑ ps} pp (suc v) = {!!}
  -- resVar {ps = p ‚à∑ ps} pp (res v) = {!!}
  -- resVar {ps = p ‚à∑ ps} pp none = {!!}

  -- œÄ-subset : ‚àÄ{p q} -> ‚¶ó p ‚¶ò‚Çä ‚â§ q -> œÄ X ‚à£ ‚¶ó p ‚¶ò‚Çä , [] ‚Ü¶ A Type -> œÄ X ‚à£ q , [] ‚Ü¶ B Type -> A ‚â° B
  -- œÄ-subset pp (proj-Ôº† x done) (proj-Ôº† x‚ÇÇ done) = {!!}
  -- œÄ-subset pp (proj-Ôº† x done) (proj-Ôº†-‚â† x‚ÇÇ) = {!!}
  -- œÄ-subset pp (proj-Ôº†-‚â† x) (proj-Ôº† x‚ÇÅ x‚ÇÇ) = {!!}
  -- œÄ-subset pp (proj-Ôº†-‚â† x) (proj-Ôº†-‚â† x‚ÇÅ) = {!!}
  -- œÄ-subset pp (P‚ÇÅ ‚áí P‚ÇÇ) (Q ‚áí Q‚ÇÅ) = {!!}
  -- œÄ-subset pp (P‚ÇÅ √ó√ó P‚ÇÇ) (Q √ó√ó Q‚ÇÅ) = {!!}
  -- œÄ-subset pp (Either P‚ÇÅ P‚ÇÇ) (Either Q Q‚ÇÅ) = {!!}
  -- œÄ-subset pp (Tr P‚ÇÅ) (Tr Q) = {!!}
  -- œÄ-subset pp (Lst P‚ÇÅ) (Lst Q) = {!!}
  -- œÄ-subset pp Unit Unit = {!!}


-- VV   : œÄ D Ôº† p‚ÇÄ ‚à£ p‚ÇÄ , ps‚ÇÅ ‚Ü¶ B Type
-- PP   : Œ≥ X ‚à£ p‚ÇÄ , (p‚ÇÅ ‚à∑ ps ++-List ‚¶ó p ‚¶ò‚Çä ‚à∑ []) ‚Ü¶ C Type
-- QQ   : Œ≥ X ‚à£ p‚ÇÄ , (p‚ÇÅ ‚à∑ ps ++-List qs ‚à∑ ps'' ‚à∑ rs) ‚Ü¶ D Type
-- RR   : Œ≥ C Ôº† p‚ÇÄ ‚à£ p‚ÇÄ , (p‚ÇÅ ‚à∑ ps ++-List ‚¶ó p ‚¶ò‚Çä ‚à∑ ps'' ‚à∑ rs) ‚Ü¶ A Type
  resVarVar : ‚àÄ{A A‚ÇÅ A‚ÇÇ A‚ÇÉ} -> ‚àÄ{ps qs Vs Vs' Ps Q0 Qs R0 Rs} -> Vs ‚âº Vs' -> ps ‚â§ qs
              -> (PP   : Œ≥ X ‚à£ ps , Ps ‚Ü¶ A‚ÇÇ Type)
              -> (QQ   : Œ≥ X ‚à£ qs , (Q0 ‚à∑ Qs)  ‚Ü¶ A‚ÇÉ Type)
              -> (RR   : Œ≥ A‚ÇÇ Ôº† ps ‚à£ ps , (R0 ‚à∑ Rs) ‚Ü¶ A Type)
              -> (VV   : œÄ A‚ÇÉ Ôº† qs ‚à£ qs , Vs ‚Ü¶ A‚ÇÅ Type)
              -> Œî , (A Ôº† ps) ‚ä¢Var A‚ÇÅ GlobalFiber[ ps ‚à∑ Vs' ]
  resVarVar x pp (toplevel (proj-Ôº† p0 done)) (sublevel-Ôº† qq) (sublevel-Ôº† x‚ÇÅ) (proj-Ôº† x‚ÇÇ RR) = zero x (proj-Ôº† refl-‚â§ RR)
  resVarVar x pp (toplevel (proj-Ôº†-‚â† p0)) (sublevel-Ôº† qq) (sublevel-Ôº† x‚ÇÅ) (proj-Ôº† x‚ÇÇ RR) = ‚ä•-elim (p0 (pp ‚ü° qq))
  resVarVar x pp (sublevel-Ôº† p0) (sublevel-Ôº† qq) (sublevel-Ôº† x‚ÇÅ) (proj-Ôº† x‚ÇÇ RR) = zero x (proj-Ôº† refl-‚â§ RR)
  resVarVar x pp (sublevel-Ôº†-‚â† p0) (sublevel-Ôº† qq) (sublevel-Ôº† x‚ÇÅ) (proj-Ôº† x‚ÇÇ RR) = ‚ä•-elim (p0 (pp ‚ü° qq))
  resVarVar x pp (p0) (sublevel-Ôº†-‚â† qq) (sublevel-Ôº† x‚ÇÅ) ((proj-Ôº† x‚ÇÇ done)) = none
  resVarVar x pp (p0) (sublevel-Ôº†-‚â† qq) (sublevel-Ôº† x‚ÇÅ) ((proj-Ôº† x‚ÇÇ Unit)) = none
  resVarVar x pp (p0) (sublevel-break _) (sublevel-Ôº† x‚ÇÅ) ((proj-Ôº† x‚ÇÇ done)) = none
  resVarVar x pp (p0) (sublevel-break _) (sublevel-Ôº† x‚ÇÅ) ((proj-Ôº† x‚ÇÇ Unit)) = none
  resVarVar x pp (p0) (qq) (sublevel-Ôº† x‚ÇÅ) ((proj-Ôº†-‚â† x‚ÇÇ)) = ‚ä•-elim (x‚ÇÇ refl-‚â§)
  resVarVar x pp (p0) (qq) (sublevel-Ôº†-‚â† x‚ÇÅ) ((proj-Ôº† x‚ÇÇ x‚ÇÉ)) = ‚ä•-elim (x‚ÇÅ refl-‚â§)
  resVarVar x pp (p0) (qq) (sublevel-Ôº†-‚â† x‚ÇÅ) ((proj-Ôº†-‚â† x‚ÇÇ)) = ‚ä•-elim (x‚ÇÇ refl-‚â§)



{-
  resVarVar2 : ‚àÄ{A B C D} -> ‚àÄ{p‚ÇÄ p‚ÇÅ ps ps‚ÇÅ ps' ps'' rs vs ws}
               -> ps‚ÇÅ ‚âº (p‚ÇÅ ‚à∑ ps ++-List ws ‚à∑ ps')
               -> vs ‚â§ ws
              -> (PP   : Œ≥ X ‚à£ p‚ÇÄ , (p‚ÇÅ ‚à∑ ps ++-List vs ‚à∑ []) ‚Ü¶ C Type)
              -> (QQ   : Œ≥ X ‚à£ p‚ÇÄ , (p‚ÇÅ ‚à∑ ps ++-List ws ‚à∑ ps'' ‚à∑ rs) ‚Ü¶ D Type)
              -> (RR   : Œ≥ C Ôº† p‚ÇÄ ‚à£ p‚ÇÄ , (p‚ÇÅ ‚à∑ ps ++-List vs ‚à∑ ps'' ‚à∑ rs) ‚Ü¶ A Type)
              -> (VV   : œÄ D Ôº† p‚ÇÄ ‚à£ p‚ÇÄ , ps‚ÇÅ ‚Ü¶ B Type)
              -> (Œî , (A Ôº† p‚ÇÄ)) ‚ä¢Var B GlobalFiber[ p‚ÇÄ ‚à∑ p‚ÇÅ ‚à∑ ps ++-List vs ‚à∑ ps' ]
  resVarVar2 = {!!}
  -}

{-
  resVarVar2 : ‚àÄ{A B C D} -> ‚àÄ{p‚ÇÄ p‚ÇÅ ps ps‚ÇÅ ps' ps'' rs vs ws}
               -> ps‚ÇÅ ‚âº (p‚ÇÅ ‚à∑ ps ++-List ws ‚à∑ ps')
               -> vs ‚â§ ws
              -> (PP   : Œ≥ X ‚à£ p‚ÇÄ , (p‚ÇÅ ‚à∑ ps ++-List vs ‚à∑ []) ‚Ü¶ C Type)
              -> (QQ   : Œ≥ X ‚à£ p‚ÇÄ , (p‚ÇÅ ‚à∑ ps ++-List ws ‚à∑ ps'' ‚à∑ rs) ‚Ü¶ D Type)
              -> (RR   : Œ≥ C Ôº† p‚ÇÄ ‚à£ p‚ÇÄ , (p‚ÇÅ ‚à∑ ps ++-List vs ‚à∑ ps'' ‚à∑ rs) ‚Ü¶ A Type)
              -> (VV   : œÄ D Ôº† p‚ÇÄ ‚à£ p‚ÇÄ , ps‚ÇÅ ‚Ü¶ B Type)
              -> (Œî , (A Ôº† p‚ÇÄ)) ‚ä¢Var B GlobalFiber[ p‚ÇÄ ‚à∑ p‚ÇÅ ‚à∑ ps ++-List vs ‚à∑ ps' ]
  resVarVar2 x pp (sublevel-Ôº† p0) (sublevel-Ôº† qq) (sublevel-Ôº† x‚ÇÅ) (proj-Ôº† x‚ÇÇ RR) = zero {!!} (proj-Ôº† {!!} {!!})
  resVarVar2 x pp (sublevel-Ôº†-‚â† p0) (sublevel-Ôº† qq) (sublevel-Ôº† x‚ÇÅ) (proj-Ôº† x‚ÇÇ RR) = {!!} -- ‚ä•-elim (p0 (pp ‚ü° qq))
  resVarVar2 x pp (p0) (sublevel-Ôº†-‚â† qq) (sublevel-Ôº† x‚ÇÅ) ((proj-Ôº† x‚ÇÇ done)) = none
  resVarVar2 x pp (p0) (sublevel-Ôº†-‚â† qq) (sublevel-Ôº† x‚ÇÅ) ((proj-Ôº† x‚ÇÇ Unit)) = none
  resVarVar2 x pp (p0) (sublevel-break _) (sublevel-Ôº† x‚ÇÅ) ((proj-Ôº† x‚ÇÇ done)) = none
  resVarVar2 x pp (p0) (sublevel-break _) (sublevel-Ôº† x‚ÇÅ) ((proj-Ôº† x‚ÇÇ Unit)) = none
  resVarVar2 x pp (p0) (qq) (sublevel-Ôº† x‚ÇÅ) ((proj-Ôº†-‚â† x‚ÇÇ)) = {!!} -- ‚ä•-elim (x‚ÇÇ refl-‚â§)
  resVarVar2 x pp (p0) (qq) (sublevel-Ôº†-‚â† x‚ÇÅ) ((proj-Ôº† x‚ÇÇ x‚ÇÉ)) = {!!} -- ‚ä•-elim (x‚ÇÅ refl-‚â§)
  resVarVar2 x pp (p0) (qq) (sublevel-Ôº†-‚â† x‚ÇÅ) ((proj-Ôº†-‚â† x‚ÇÇ)) = {!!} -- ‚ä•-elim (x‚ÇÇ refl-‚â§)
-}
{-
  resVarVar2 : ‚àÄ{A B C D} -> ‚àÄ{p‚ÇÄ zs ps‚ÇÅ ps' ps'' rs vs ws}
               -> ps‚ÇÅ ‚âº (zs ++-List ws ‚à∑ ps')
               -> vs ‚â§ ws
              -> (PP   : Œ≥ X ‚à£ p‚ÇÄ , (zs ++-List vs ‚à∑ []) ‚Ü¶ C Type)
              -> (QQ   : Œ≥ X ‚à£ p‚ÇÄ , (zs ++-List ws ‚à∑ ps'' ‚à∑ rs) ‚Ü¶ D Type)
              -> (RR   : Œ≥ C Ôº† p‚ÇÄ ‚à£ p‚ÇÄ , (zs ++-List vs ‚à∑ ps'' ‚à∑ rs) ‚Ü¶ A Type)
              -> (VV   : œÄ D Ôº† p‚ÇÄ ‚à£ p‚ÇÄ , ps‚ÇÅ ‚Ü¶ B Type)
              -> (Œî , (A Ôº† p‚ÇÄ)) ‚ä¢Var B GlobalFiber[ p‚ÇÄ ‚à∑ zs ++-List vs ‚à∑ ps' ]
  resVarVar2 x pp (toplevel (proj-Ôº† p0 done)) (sublevel-Ôº† qq) (sublevel-Ôº† x‚ÇÅ) (proj-Ôº† x‚ÇÇ RR) = zero x (proj-Ôº† refl-‚â§ RR)
  resVarVar2 x pp (toplevel (proj-Ôº†-‚â† p0)) (sublevel-Ôº† qq) (sublevel-Ôº† x‚ÇÅ) (proj-Ôº† x‚ÇÇ RR) = ‚ä•-elim (p0 (pp ‚ü° qq))
  resVarVar2 x pp (sublevel-Ôº† p0) (sublevel-Ôº† qq) (sublevel-Ôº† x‚ÇÅ) (proj-Ôº† x‚ÇÇ RR) = zero x (proj-Ôº† {!!} RR)
  resVarVar2 x pp (sublevel-Ôº†-‚â† p0) (sublevel-Ôº† qq) (sublevel-Ôº† x‚ÇÅ) (proj-Ôº† x‚ÇÇ RR) = ‚ä•-elim (p0 (pp ‚ü° qq))
  resVarVar2 x pp (p0) (sublevel-Ôº†-‚â† qq) (sublevel-Ôº† x‚ÇÅ) ((proj-Ôº† x‚ÇÇ done)) = none
  resVarVar2 x pp (p0) (sublevel-Ôº†-‚â† qq) (sublevel-Ôº† x‚ÇÅ) ((proj-Ôº† x‚ÇÇ Unit)) = none
  resVarVar2 x pp (p0) (sublevel-break _) (sublevel-Ôº† x‚ÇÅ) ((proj-Ôº† x‚ÇÇ done)) = none
  resVarVar2 x pp (p0) (sublevel-break _) (sublevel-Ôº† x‚ÇÅ) ((proj-Ôº† x‚ÇÇ Unit)) = none
  resVarVar2 x pp (p0) (qq) (sublevel-Ôº† x‚ÇÅ) ((proj-Ôº†-‚â† x‚ÇÇ)) = ‚ä•-elim (x‚ÇÇ refl-‚â§)
  resVarVar2 x pp (p0) (qq) (sublevel-Ôº†-‚â† x‚ÇÅ) ((proj-Ôº† x‚ÇÇ x‚ÇÉ)) = ‚ä•-elim (x‚ÇÅ refl-‚â§)
  resVarVar2 x pp (p0) (qq) (sublevel-Ôº†-‚â† x‚ÇÅ) ((proj-Ôº†-‚â† x‚ÇÇ)) = ‚ä•-elim (x‚ÇÇ refl-‚â§)
  -}




              -- -> (PP   : Œ≥ X ‚à£ ps , Ps ‚Ü¶ A‚ÇÇ Type)
              -- -> (QQ   : Œ≥ X ‚à£ qs , (Q0 ‚à∑ Qs)  ‚Ü¶ A‚ÇÉ Type)
              -- -> (RR   : Œ≥ A‚ÇÇ Ôº† ps ‚à£ ps , (R0 ‚à∑ Rs) ‚Ü¶ A Type)
              -- -> (VV   : œÄ A‚ÇÉ Ôº† qs ‚à£ qs , Vs ‚Ü¶ A‚ÇÅ Type)
              -- -> Œî , (A Ôº† ps) ‚ä¢Var A‚ÇÅ GlobalFiber[ ps ‚à∑ Vs' ]

  -- TODO : We need a new projection type which does not allow opening of not-Ôº† types in a sublevel.


  -- replaceIn-œÄ pp (proj-Ôº† x x‚ÇÅ) = {!!}
  -- replaceIn-œÄ pp (proj-Ôº†-‚â† x) = {!!}
  -- replaceIn-œÄ pp (P‚ÇÅ ‚áí P‚ÇÇ) = {!!}
  -- replaceIn-œÄ pp (P‚ÇÅ √ó√ó P‚ÇÇ) = {!!}
  -- replaceIn-œÄ pp (Either P‚ÇÅ P‚ÇÇ) = {!!}
  -- replaceIn-œÄ pp (Tr P‚ÇÅ) = {!!}
  -- replaceIn-œÄ pp (Lst P‚ÇÅ) = {!!}
  -- replaceIn-œÄ pp Unit = {!!}


  replaceIn-œÄS : ‚àÄ{rs qs ps} -> qs ‚â§ rs -> œÄS X ‚à£ rs , ps ‚Ü¶ B Type -> (B ‚â° Unit) +-ùí∞ œÄS X ‚à£ qs , ps ‚Ü¶ B Type
  replaceIn-œÄS pp (proj-Ôº† x x‚ÇÅ) = yes $ proj-Ôº† (pp ‚ü° x) x‚ÇÅ
  replaceIn-œÄS pp (proj-Ôº†-‚â† x) = no refl-‚â°
  replaceIn-œÄS pp (break-œÄ x) = yes $ break-œÄ x


  replaceIn-œâ : ‚àÄ{rs qs ps} -> qs ‚â§ rs -> œâ A ‚à£ rs ‚à∑ ps ‚Ü¶ B Type -> (B ‚â° Unit) +-ùí∞ œâ A ‚à£ qs ‚à∑ ps ‚Ü¶ B Type
  replaceIn-œâ pp (proj-‚óª x) with replaceIn-œÄ pp x
  ... | no P = no P
  ... | yes P = yes $ proj-‚óª P
  replaceIn-œâ pp Unit = yes Unit

  replaceIn-‚âº : {A : ùí∞ ùëñ} -> {qs : A} -> ‚àÄ{ps qs0 qs1} -> ps ‚âº (qs0 <> (qs ‚à∑ qs1)) -> ‚àÄ rs -> ‚àë Œª ps' -> ps' ‚âº qs0 <> (rs ‚à∑ qs1)
  replaceIn-‚âº {qs0 = []} (skip pp) rs = _ , skip pp
  replaceIn-‚âº {qs0 = []} (take pp) rs = _ , take pp
  replaceIn-‚âº {qs0 = q ‚à∑ qs0} (skip pp) rs = let ps' , pp' = replaceIn-‚âº {qs0 = qs0} pp rs in _ , skip pp'
  replaceIn-‚âº {qs0 = q ‚à∑ qs0} (take pp) rs = let ps' , pp' = replaceIn-‚âº {qs0 = qs0} pp rs in _ , take pp'


  mutual
    œâ-replace-‚âº : ‚àÄ{qs ps qs0 qs1} -> (pp : ps ‚âº (qs0 <> (qs ‚à∑ qs1))) -> ‚àÄ {rs} -> rs ‚â§ qs -> œâ A ‚à£ ps ‚Ü¶ B Type -> (B ‚â° Unit) +-ùí∞ œâ A ‚à£ fst (replaceIn-‚âº {qs0 = qs0} pp rs) ‚Ü¶ B Type
    œâ-replace-‚âº {qs0 = []} (skip pp) rs‚â§qs Ap = yes Ap
    œâ-replace-‚âº {qs0 = []} (take pp) rs‚â§qs Ap = replaceIn-œâ rs‚â§qs Ap
    œâ-replace-‚âº {qs0 = q ‚à∑ qs0} (skip pp) rs‚â§qs Ap = œâ-replace-‚âº {qs0 = qs0} pp rs‚â§qs Ap
    œâ-replace-‚âº {qs0 = q ‚à∑ qs0} (take pp) rs‚â§qs (proj-‚óª x)
      with œÄ-replace-‚âº {qs0 = qs0} pp rs‚â§qs x
    ... | no P = no P
    ... | yes P = yes (proj-‚óª P)
    œâ-replace-‚âº {qs0 = q ‚à∑ qs0} (take pp) rs‚â§qs Unit = yes Unit

    œÄS-replace-‚âº : ‚àÄ{p qs ps qs0 qs1} -> (pp : ps ‚âº (qs0 <> (qs ‚à∑ qs1))) -> ‚àÄ {rs} -> rs ‚â§ qs -> œÄS X ‚à£ p , ps ‚Ü¶ B Type -> (B ‚â° Unit) +-ùí∞ œÄS X ‚à£ p , fst (replaceIn-‚âº {qs0 = qs0} pp rs) ‚Ü¶ B Type
    œÄS-replace-‚âº pp x (proj-Ôº† x‚ÇÅ x‚ÇÇ) with œâ-replace-‚âº pp x x‚ÇÇ
    ... | no Q = no Q
    ... | yes Q = yes (proj-Ôº† x‚ÇÅ Q)
    œÄS-replace-‚âº pp x (proj-Ôº†-‚â† x‚ÇÅ) = no refl-‚â°
    œÄS-replace-‚âº pp x (break-œÄ x‚ÇÅ) = no refl-‚â°

    œÄ-replace-‚âº : ‚àÄ{p qs ps qs0 qs1} -> (pp : ps ‚âº (qs0 <> (qs ‚à∑ qs1))) -> ‚àÄ {rs} -> rs ‚â§ qs -> œÄ X ‚à£ p , ps ‚Ü¶ B Type -> (B ‚â° Unit) +-ùí∞ œÄ X ‚à£ p , fst (replaceIn-‚âº {qs0 = qs0} pp rs) ‚Ü¶ B Type

    œÄ-replace-‚âº pp x (proj-Ôº† x‚ÇÅ x‚ÇÇ) with œâ-replace-‚âº pp x x‚ÇÇ
    ... | no Q = no Q
    ... | yes Q = yes (proj-Ôº† x‚ÇÅ Q)
    œÄ-replace-‚âº pp x (proj-Ôº†-‚â† x‚ÇÅ) = no refl-‚â°
    œÄ-replace-‚âº {qs0 = []} (skip pp) x (P‚ÇÅ ‚áí P‚ÇÇ) = yes (P‚ÇÅ ‚áí P‚ÇÇ)
    œÄ-replace-‚âº {qs0 = x‚ÇÅ ‚à∑ qs0} (skip pp) x (P‚ÇÅ ‚áí P‚ÇÇ) = œÄ-replace-‚âº {qs0 = qs0} pp x (P‚ÇÅ ‚áí P‚ÇÇ)
    œÄ-replace-‚âº {qs0 = []} (skip pp) x (P‚ÇÅ √ó√ó P‚ÇÇ) = yes (P‚ÇÅ √ó√ó P‚ÇÇ)
    œÄ-replace-‚âº {qs0 = x‚ÇÅ ‚à∑ qs0} (skip pp) x (P‚ÇÅ √ó√ó P‚ÇÇ) = œÄ-replace-‚âº {qs0 = qs0} pp x (P‚ÇÅ √ó√ó P‚ÇÇ)
    œÄ-replace-‚âº {qs0 = []} (skip pp) x (Either P‚ÇÅ P‚ÇÇ) = yes (Either P‚ÇÅ P‚ÇÇ)
    œÄ-replace-‚âº {qs0 = x‚ÇÅ ‚à∑ qs0} (skip pp) x (Either P‚ÇÅ P‚ÇÇ) = œÄ-replace-‚âº {qs0 = qs0} pp x (Either P‚ÇÅ P‚ÇÇ)
    œÄ-replace-‚âº {qs0 = []} (skip pp) x (Tr P‚ÇÅ) = yes (Tr P‚ÇÅ)
    œÄ-replace-‚âº {qs0 = x‚ÇÅ ‚à∑ qs0} (skip pp) x (Tr P‚ÇÅ) = œÄ-replace-‚âº {qs0 = qs0} pp x (Tr P‚ÇÅ)
    œÄ-replace-‚âº {qs0 = []} (skip pp) x (Lst P‚ÇÅ) = yes (Lst P‚ÇÅ)
    œÄ-replace-‚âº {qs0 = x‚ÇÅ ‚à∑ qs0} (skip pp) x (Lst P‚ÇÅ) = œÄ-replace-‚âº {qs0 = qs0} pp x (Lst P‚ÇÅ)
    œÄ-replace-‚âº pp x (break-œÄ Z) = no refl-‚â°
    œÄ-replace-‚âº pp x Unit = no refl-‚â°



  resVar'' : ‚àÄ{Œì Œî Œî‚ÇÄ Œî‚ÇÅ qs p ps ps' ps'' rs} -> Œì ‚à£ ps <> (‚¶ó p ‚¶ò‚Çä ‚à∑ []) ‚Ü¶ Œî Ctx
          -> Œì ‚à£ ps <> (qs ‚à∑ ps'' ‚à∑ rs) ‚Ü¶ Œî‚ÇÄ Ctx
          -> Œî ‚à£ ps <> (‚¶ó p ‚¶ò‚Çä ‚à∑ ps'' ‚à∑ rs) ‚Ü¶ Œî‚ÇÅ Ctx
          -> ‚¶ó p ‚¶ò‚Çä ‚â§ qs
          -> Œî‚ÇÄ ‚ä¢Var A GlobalFiber[ ps <> (qs ‚à∑ ps') ]
          -> Œî‚ÇÅ ‚ä¢Var A GlobalFiber[ ps <> (‚¶ó p ‚¶ò‚Çä ‚à∑ ps') ]
  
  resVar'' {ps = []} (P , PP) (Q , QQ) (R , RR) pp (suc v) = suc (resVar'' {ps = []} P Q R pp v)
  resVar'' {ps = []} (stepRes P) (stepRes Q) (stepRes R) pp (res v) = res (resVar'' {ps = _ ‚à∑ []} P Q R pp v)
  resVar'' {ps = []} (P , PP) (Q , QQ) (R , RR) pp none = none
  resVar'' {ps = []} (P , PP) (Q , QQ) (R , RR) pp (zero x VV) = resVarVar x pp PP QQ RR VV

  resVar'' {ps = p ‚à∑ ps} (P , PP) (Q , QQ) (R , RR) pp (suc v) = suc (resVar'' {ps = p ‚à∑ ps} P Q R pp v)
  resVar'' {ps = p ‚à∑ ps} (stepRes P) (stepRes Q) (stepRes R) pp (res v) = res (resVar'' {ps = _ ‚à∑ p ‚à∑ ps} P Q R pp v)
  resVar'' {ps = p ‚à∑ ps} (P , PP) (Q , QQ) (R , RR) pp none = none

  resVar'' {ps = p ‚à∑ []} (P , PP) (Q , QQ) (R , RR) pp (zero x VV) with (œÄ-replace-‚âº {qs0 = []} x pp VV )
  ... | no refl-‚â° = none
  ... | yes Z =
    let ps' , x' = replaceIn-‚âº {qs0 = []} x _
    in resVarVar x' refl-‚â§ PP QQ RR Z -- resVarVar2 {zs = []} x pp PP QQ RR VV

    -- let ps' , x' = replaceIn-‚âº {qs0 = []} x _
    -- in resVarVar x' refl-‚â§ PP QQ RR (œÄS-replace-‚âº {qs0 = []} x pp VV ) -- resVarVar2 {zs = []} x pp PP QQ RR VV
  resVar'' {Œî = Œî} {ps = p‚ÇÄ ‚à∑ p‚ÇÅ ‚à∑ ps} (P , PP) (Q , QQ) (R , RR) pp (zero x VV)
    with (œÄ-replace-‚âº {qs0 = p‚ÇÅ ‚à∑ ps} x pp VV )
  ... | no refl-‚â° = none
  ... | yes Z =
    let ps' , x' = replaceIn-‚âº {qs0 = p‚ÇÅ ‚à∑ ps} x _
    in resVarVar x' refl-‚â§ PP QQ RR Z -- resVarVar2 {zs = []} x pp PP QQ RR VV

  -- =
  --   let t = resVarVar {Œî = Œî} x refl-‚â§ PP QQ RR VV
  --   in resVarVar2 x pp PP QQ RR VV





          {-
  resVar'' {ps = []} (P , toplevel (proj-Ôº† p0 done)) (Q , sublevel-Ôº† qq) (R , sublevel-Ôº† x‚ÇÅ) pp (zero {ps = []} x (proj-Ôº† x‚ÇÇ done)) = zero []‚âº (proj-Ôº† refl-‚â§ done)
  resVar'' {ps = []} (P , toplevel (proj-Ôº†-‚â† p0)) (Q , sublevel-Ôº† qq) (R , sublevel-Ôº† x‚ÇÅ) pp (zero {ps = []} x (proj-Ôº† x‚ÇÇ done)) = {!!}
  resVar'' {ps = []} (P , p0) (Q , sublevel-Ôº†-‚â† qq) (R , sublevel-Ôº† x‚ÇÅ) pp (zero {ps = []} x (proj-Ôº† x‚ÇÇ done)) = none
  resVar'' {ps = []} (P , p0) (Q , sublevel-break-‚áí) (R , sublevel-Ôº† x‚ÇÅ) pp (zero {ps = []} x (proj-Ôº† x‚ÇÇ done)) = none
  resVar'' {ps = []} (P , p0) (Q , qq) (R , sublevel-Ôº† x‚ÇÅ) pp (zero {ps = []} x (proj-Ôº†-‚â† x‚ÇÇ)) = none
  resVar'' {ps = []} (P , p0) (Q , qq) (R , sublevel-Ôº† x‚ÇÅ) pp (zero {ps = x‚ÇÇ ‚à∑ ps} x y) = zero x {!!}
  resVar'' {ps = []} (P , p0) (Q , qq) (R , sublevel-Ôº†-‚â† x‚ÇÅ) pp (zero x (proj-Ôº† x‚ÇÇ x‚ÇÉ)) = zero x {!!}
  resVar'' {ps = []} (P , p0) (Q , qq) (R , sublevel-Ôº†-‚â† x‚ÇÅ) pp (zero x (proj-Ôº†-‚â† x‚ÇÇ)) = zero x {!!}
  resVar'' {ps = []} P Q R pp (suc v) = {!!}
  resVar'' {ps = []} P Q R pp (res v) = {!!}
  resVar'' {ps = []} P Q R pp none = {!!}
  resVar'' {ps = p ‚à∑ ps} P Q R pp v = {!!}
  -}

{-
  resVar' : ‚àÄ{Œì Œî‚ÇÄ Œî‚ÇÅ qs rs ps ps' ps''} -> Œì ‚à£ ps <> (qs ‚à∑ ps'') ‚Ü¶ Œî‚ÇÄ Ctx -> Œì ‚à£ ps <> (rs ‚à∑ ps'') ‚Ü¶ Œî‚ÇÅ Ctx  -> rs ‚â§ qs -> Œî‚ÇÄ ‚ä¢Var A GlobalFiber[ ps <> (qs ‚à∑ ps') ] -> Œî‚ÇÅ ‚ä¢Var A GlobalFiber[ ps <> (rs ‚à∑ ps') ]
  resVar' {ps = []} (P0 , x‚ÇÇ) (P1 , x‚ÇÉ) pp (zero {ps = []} x (proj-Ôº† a done)) = zero x (proj-Ôº† {!!} {!!})
  resVar' {ps = []} (P0 , x‚ÇÇ) (P1 , x‚ÇÉ) pp (zero {ps = []} x (proj-Ôº†-‚â† a)) = zero x {!x‚ÇÅ!}
  resVar' {ps = []} (P0 , x‚ÇÇ) (P1 , x‚ÇÉ) pp (zero {ps = (p ‚à∑ ps)} x x‚ÇÅ) = zero x {!!}
  resVar' {ps = []} P0 P1 pp (suc v) = {!!}
  resVar' {ps = []} P0 P1 pp (res v) = {!!}
  resVar' {ps = []} P0 P1 pp none = {!!}
  resVar' {ps = p ‚à∑ ps} P0 P1 pp v = {!!}
  -}


  -- resVar p (zero x p) = zero {!!} ?
  -- resVar p (suc v) = suc (resVar p v)
  -- resVar {ps = ps} rel (res {p = p} v) = res (resVar {ps = p ‚à∑ ps} rel v)

  -- transRes-GlobalFibered : ‚àÄ{qs rs} -> rs ‚â§ qs -> Œì ,[ qs ] ‚ä¢ X GlobalFibered[ ps ] -> Œì ,[ rs ] ‚ä¢ X GlobalFibered[ ps ]
  -- -- transRes-GlobalFibered {qs = qs} {rs = rs} pp t = map-Var (Œª {q‚ààps (stepRes Œìp) (stepRes Œîp) (res v) -> res (let v' = resVar {ps = []} pp v in projVar1 {ps = rs ‚à∑ []} (unique-œÄ-Ctx-‚â§ pp Œìp Œîp ) v')}) t
  -- transRes-GlobalFibered {qs = qs} {rs = rs} pp t = map-Var (Œª {q‚ààps (stepRes Œìp) (stepRes Œîp) (res v) -> res (resVar' {ps = []} Œìp Œîp pp v)}) t

  transRes'-GlobalFibered : ‚àÄ{qs} -> Œì ‚à£ ‚¶ó p ‚¶ò‚Çä ‚à∑ [] ‚Ü¶ Œî Ctx -> ‚¶ó p ‚¶ò‚Çä ‚â§ qs -> Œì ,[ qs ] ‚ä¢ X GlobalFibered[ ps ] -> Œî ,[ ‚¶ó p ‚¶ò‚Çä ] ‚ä¢ X GlobalFibered[ ps ]
  transRes'-GlobalFibered P pp t = map-Var (Œª {q‚ààps (stepRes Œìp) (stepRes Œîp) (res v) -> res (let v' = resVar'' {ps = []} P Œìp Œîp pp v in v')}) t
  -- projVar1 {ps = _ ‚à∑ []} (unique-œÄ-Ctx-‚â§ pp Œìp Œîp ) v')}) t


  cong-GlobalFibered : ‚àÄ{Œì Œî} -> Œì ‚â° Œî -> Œì ‚ä¢ X GlobalFibered[ ps ] -> Œî ‚ä¢ X GlobalFibered[ ps ]
  cong-GlobalFibered {X = X} {ps = ps} p = transp-‚â° (cong-‚â° (Œª Œæ -> Œæ ‚ä¢ X GlobalFibered[ ps ]) p)

  cong-Type-GlobalFibered : ‚àÄ{X Y} -> X ‚â° Y -> Œì ‚ä¢ X GlobalFibered[ ps ] -> Œì ‚ä¢ Y GlobalFibered[ ps ]
  cong-Type-GlobalFibered {Œì = Œì} {ps = ps} p = transp-‚â° (cong-‚â° (Œª Œæ -> Œì ‚ä¢ Œæ GlobalFibered[ ps ]) p)



  --------------------------------------------------------------
  -- Reproducing global term constructors, locally
  --------------------------------------------------------------
  --

  -------------------
  -- tt

  tt-GlobalFibered : Œì ‚ä¢ Unit GlobalFibered[ ps ]
  tt-GlobalFibered = incl Œª { p x Unit Œìp ‚Üí tt}

  tt-Ôº†-GlobalFibered : Œì ‚ä¢ Unit Ôº† U GlobalFibered[ ps ]
  tt-Ôº†-GlobalFibered = incl Œª { p x (proj-Ôº† x‚ÇÅ done) Œìp ‚Üí tt
                              ; p x (proj-Ôº†-‚â† x‚ÇÅ) Œìp ‚Üí tt}


  -------------------
  -- lambda

  lam-GlobalFibered : Œì , X ‚ä¢ Y GlobalFibered[ ps ] -> Œì ‚ä¢ X ‚áí Y GlobalFibered[ ps ]
  lam-GlobalFibered t = incl Œª {p p‚ààps (X‚Ü¶A ‚áí Y‚Ü¶B) Œì‚Ü¶Œî -> lam (‚ü® t ‚ü© p p‚ààps Y‚Ü¶B (Œì‚Ü¶Œî , toplevel X‚Ü¶A)) }


  -------------------
  -- app

  app-GlobalFibered : Œì ‚ä¢ X ‚áí Y GlobalFibered[ ps ]
                   -> Œì ‚ä¢ X GlobalFibered[ ps ]
                   -> Œì ‚ä¢ Y GlobalFibered[ ps ]
  ‚ü® app-GlobalFibered {X = X} t s ‚ü© p p‚ààps Y‚Ü¶Y' Œì‚Ü¶Œî =
    let X' = œÄ-Type X (‚¶ó p ‚¶ò‚Çä , [])
        X‚Ü¶X' = œÄ-Type-Proof X ‚¶ó p ‚¶ò‚Çä
        t' = (‚ü® t ‚ü© p p‚ààps (X‚Ü¶X' ‚áí Y‚Ü¶Y') Œì‚Ü¶Œî)
        s' = (‚ü® s ‚ü© p p‚ààps X‚Ü¶X' Œì‚Ü¶Œî)
    in app t' s'

  -------------------
  -- letin

  letin-GlobalFibered : Œì ‚ä¢ X GlobalFibered[ ps ]
                     -> Œì , X ‚ä¢ Y GlobalFibered[ ps ]
                     -> Œì ‚ä¢ Y GlobalFibered[ ps ]
  letin-GlobalFibered t s = app-GlobalFibered (lam-GlobalFibered s) t

  -------------------
  -- mod-box

  box-GlobalFibered : Œì ,[ qs ] ‚ä¢ X GlobalFibered[ allProcs This ]
                     -> Œì ‚ä¢ ‚óª X Ôº† qs GlobalFibered[ ps ]
  ‚ü® box-GlobalFibered {X = X} t ‚ü© p p‚ààps (proj-Ôº† x done) Œì‚Ü¶Œî =
    let t' = transRes'-GlobalFibered Œì‚Ü¶Œî x t
    in box' {p = p} t'

    -- in box' {p = p} {!!} --  (map-Var (Œª {q‚ààps (stepRes Œìp) (stepRes Œîp) (res v) -> res (transp-Ctx-Var ((idempotent-local' (local-Proof Œì‚Ü¶Œî) Œîp)) (transp-Ctx-Var (unique-œÄ-Ctx Œìp Œì‚Ü¶Œî) v))}) t')
    -- in box' {p = p} (map-Var (Œª {q‚ààps (stepRes Œìp) (stepRes Œîp) (res v) -> res (transp-Ctx-Var ((idempotent-local' (local-Proof Œì‚Ü¶Œî) Œîp)) (transp-Ctx-Var (unique-œÄ-Ctx Œìp Œì‚Ü¶Œî) v))}) t')
  ‚ü® box-GlobalFibered {X = X} t ‚ü© p p‚ààps (proj-Ôº†-‚â† x) Œì‚Ü¶Œî = tt



  multibox : ‚àÄ{ŒΩ : ‚óØ ‚ü∂ ‚ñ≤ U} -> ‚àÄ{Œì i X ps} -> addRestr ŒΩ (Œì , i) ‚ä¢ X GlobalFibered[ allProcs This ]
             -> Œì ‚ä¢ F-Type ŒΩ X Ôº† i GlobalFibered[ ps ]
  multibox {ŒΩ = `[]` ‚®æ id'} t = box-GlobalFibered t
  multibox {ŒΩ = `[]` ‚®æ `Ôº†` U ‚®æ ŒΩ} t = multibox {ŒΩ = ŒΩ} (box-GlobalFibered t)

  multibox' : ‚àÄ{ŒΩ : ‚óØ ‚ü∂ ‚óØ} -> ‚àÄ{Œì X ps} -> addRestr ŒΩ Œì ‚ä¢ X GlobalFibered[ allProcs This ]
             -> Œì ‚ä¢ F-Type ŒΩ X GlobalFibered[ ps ]
  multibox' {ŒΩ = id'} t = incl Œª {p p‚ààps Xp Œìp -> ‚ü® t ‚ü© p (inAllProcs This) Xp Œìp}
  multibox' {ŒΩ = `[]` ‚®æ `Ôº†` U ‚®æ ŒΩ} t = multibox' {ŒΩ = ŒΩ} (box-GlobalFibered t)


  -------------------
  -- pure
  pure-GlobalFibered : Œì ‚ä¢ X GlobalFibered[ ps ]
                     -> Œì ‚ä¢ Tr X GlobalFibered[ ps ]
  pure-GlobalFibered t = incl Œª { p x (Tr Xp) Œìp ‚Üí pure (‚ü® t ‚ü© p x Xp Œìp)}

  pure-Ôº†-GlobalFibered : Œì ‚ä¢ A Ôº† U GlobalFibered[ ps ]
                     -> Œì ‚ä¢ Tr A Ôº† U GlobalFibered[ ps ]
  pure-Ôº†-GlobalFibered t = incl Œª { p x (proj-Ôº† x‚ÇÅ done) Œìp ‚Üí pure (‚ü® t ‚ü© p x ((proj-Ôº† x‚ÇÅ done)) Œìp)
                                   ; p x (proj-Ôº†-‚â† x‚ÇÅ) Œìp ‚Üí tt}


  -------------------
  -- seq
  seq-GlobalFibered : Œì ‚ä¢ Tr X GlobalFibered[ ps ]
                      -> Œì , X ‚ä¢ Tr Y GlobalFibered[ ps ]
                      -> Œì ‚ä¢ Tr Y GlobalFibered[ ps ]
  seq-GlobalFibered {X = X} {Y = Y} t s = incl Œª
    { p x (Tr Yp) Œìp ‚Üí
      let Xp = œÄ-Type-Proof X (‚¶ó p ‚¶ò‚Çä)
      in seq (‚ü® t ‚ü© p x (Tr Xp) Œìp) (‚ü® s ‚ü© p x (Tr Yp) (Œìp , toplevel Xp))
    }

  seq-Ôº†-GlobalFibered : Œì ‚ä¢ Tr A Ôº† U GlobalFibered[ ps ]
                      -> Œì , A Ôº† U ‚ä¢ Tr B Ôº† U GlobalFibered[ ps ]
                      -> Œì ‚ä¢ Tr B Ôº† U GlobalFibered[ ps ]
  seq-Ôº†-GlobalFibered t s = incl Œª
    { p x (proj-Ôº† x‚ÇÅ done) Œìp ‚Üí seq (‚ü® t ‚ü© p x (proj-Ôº† x‚ÇÅ done) Œìp) (‚ü® s ‚ü© p x (proj-Ôº† x‚ÇÅ done) (Œìp , toplevel (proj-Ôº† x‚ÇÅ done)))
    ; p x (proj-Ôº†-‚â† x‚ÇÅ) Œìp ‚Üí tt}


  -------------------
  -- left
  left-Ôº†-GlobalFibered : Œì ‚ä¢ A Ôº† U GlobalFibered[ ps ]
                       -> Œì ‚ä¢ Either A B Ôº† U GlobalFibered[ ps ]
  left-Ôº†-GlobalFibered t = incl Œª
    { p x (proj-Ôº† x‚ÇÅ done) Œìp ‚Üí left (‚ü® t ‚ü© p x ((proj-Ôº† x‚ÇÅ done)) Œìp)
    ; p x (proj-Ôº†-‚â† x‚ÇÅ) Œìp ‚Üí tt}

  left-GlobalFibered : Œì ‚ä¢ X GlobalFibered[ ps ]
                      -> Œì ‚ä¢ Either X Y GlobalFibered[ ps ]
  left-GlobalFibered {X = X} {Y = Y} t = incl Œª
    { p x (Either Xp Yp) Œìp ‚Üí left (‚ü® t ‚ü© p x Xp Œìp)
    }

  -------------------
  -- right
  right-Ôº†-GlobalFibered : Œì ‚ä¢ B Ôº† U GlobalFibered[ ps ]
                       -> Œì ‚ä¢ Either A B Ôº† U GlobalFibered[ ps ]
  right-Ôº†-GlobalFibered t = incl Œª
    { p x (proj-Ôº† x‚ÇÅ done) Œìp ‚Üí right (‚ü® t ‚ü© p x ((proj-Ôº† x‚ÇÅ done)) Œìp)
    ; p x (proj-Ôº†-‚â† x‚ÇÅ) Œìp ‚Üí tt}

  right-GlobalFibered : Œì ‚ä¢ Y GlobalFibered[ ps ]
                      -> Œì ‚ä¢ Either X Y GlobalFibered[ ps ]
  right-GlobalFibered {Y = Y} {X = X} t = incl Œª
    { p x (Either Xp Yp) Œìp ‚Üí right (‚ü® t ‚ü© p x Yp Œìp)
    }

  -------------------
  -- either
  either-Ôº†-GlobalFibered : Œì ‚ä¢ Either A B Ôº† U GlobalFibered[ ps ]
                         -> Œì , A Ôº† U ‚ä¢ C Ôº† U GlobalFibered[ ps ]
                         -> Œì , B Ôº† U ‚ä¢ C Ôº† U GlobalFibered[ ps ]
                         -> Œì ‚ä¢ C Ôº† U GlobalFibered[ ps ]
  either-Ôº†-GlobalFibered t s u = incl Œª
    { p x (proj-Ôº† x‚ÇÅ done) Œìp ‚Üí either (‚ü® t ‚ü© p x (proj-Ôº† x‚ÇÅ done) Œìp) (‚ü® s ‚ü© p x (proj-Ôº† x‚ÇÅ done) (Œìp , toplevel (proj-Ôº† x‚ÇÅ done))) ((‚ü® u ‚ü© p x (proj-Ôº† x‚ÇÅ done) (Œìp , toplevel (proj-Ôº† x‚ÇÅ done))))
    ; p x (proj-Ôº†-‚â† x‚ÇÅ) Œìp ‚Üí tt}


  either-GlobalFibered : Œì ‚ä¢ Either X Y GlobalFibered[ ps ]
                      -> Œì , X ‚ä¢ Z GlobalFibered[ ps ]
                      -> Œì , Y ‚ä¢ Z GlobalFibered[ ps ]
                      -> Œì ‚ä¢ Z GlobalFibered[ ps ]
  either-GlobalFibered {X = X} {Y = Y} t s u = incl Œª
    { p x Zp Œìp ‚Üí
      let Xp = œÄ-Type-Proof X (‚¶ó p ‚¶ò‚Çä)
          Yp = œÄ-Type-Proof Y (‚¶ó p ‚¶ò‚Çä)
      in either (‚ü® t ‚ü© p x (Either Xp Yp) Œìp) (‚ü® s ‚ü© p x Zp (Œìp , toplevel Xp)) ((‚ü® u ‚ü© p x Zp (Œìp , toplevel Yp)))
    }


  -------------------
  -- []
  []-Ôº†-GlobalFibered : Œì ‚ä¢ Lst A Ôº† U GlobalFibered[ ps ]
  []-Ôº†-GlobalFibered = incl Œª { p x (proj-Ôº† x‚ÇÅ done) Œìp ‚Üí []
                              ; p x (proj-Ôº†-‚â† x‚ÇÅ) Œìp ‚Üí tt}

  []-GlobalFibered : Œì ‚ä¢ Lst X GlobalFibered[ ps ]
  []-GlobalFibered {X = X} = incl Œª
    { p x (Lst Xp) Œìp ‚Üí []
    }

  -------------------
  -- _‚à∑_
  _‚à∑_-Ôº†-GlobalFibered : Œì ‚ä¢ A Ôº† U GlobalFibered[ ps ]
                    -> Œì ‚ä¢ Lst A Ôº† U GlobalFibered[ ps ]
                    -> Œì ‚ä¢ Lst A Ôº† U GlobalFibered[ ps ]
  _‚à∑_-Ôº†-GlobalFibered t s = incl Œª
    { p x (proj-Ôº† x‚ÇÅ done) Œìp ‚Üí (‚ü® t ‚ü© p x ((proj-Ôº† x‚ÇÅ done)) Œìp) ‚à∑ (‚ü® s ‚ü© p x ((proj-Ôº† x‚ÇÅ done)) Œìp)
    ; p x (proj-Ôº†-‚â† x‚ÇÅ) Œìp ‚Üí tt}

  _‚à∑_-GlobalFibered : Œì ‚ä¢ X GlobalFibered[ ps ]
                  -> Œì ‚ä¢ Lst X GlobalFibered[ ps ]
                  -> Œì ‚ä¢ Lst X GlobalFibered[ ps ]
  _‚à∑_-GlobalFibered {X = X} t s = incl Œª
    { p x (Lst Xp) Œìp ‚Üí _‚à∑_ (‚ü® t ‚ü© p x Xp Œìp) (‚ü® s ‚ü© p x (Lst Xp) Œìp)
    }


  -------------------
  -- rec-Lst
  rec-Lst-Ôº†-GlobalFibered : Œì ‚ä¢ Lst A Ôº† U GlobalFibered[ ps ]
                         -> Œì ‚ä¢ C Ôº† U GlobalFibered[ ps ]
                         -> (Œì , A Ôº† U) , C Ôº† U ‚ä¢ C Ôº† U GlobalFibered[ ps ]
                         -> Œì ‚ä¢ C Ôº† U GlobalFibered[ ps ]
  rec-Lst-Ôº†-GlobalFibered t s u = incl Œª
    { p x (proj-Ôº† x‚ÇÅ done) Œìp ‚Üí rec-Lst (‚ü® t ‚ü© p x (proj-Ôº† x‚ÇÅ done) Œìp) (‚ü® s ‚ü© p x (proj-Ôº† x‚ÇÅ done) Œìp) ((‚ü® u ‚ü© p x (proj-Ôº† x‚ÇÅ done) ((Œìp , toplevel (proj-Ôº† x‚ÇÅ done)) , toplevel (proj-Ôº† x‚ÇÅ done))))
    ; p x (proj-Ôº†-‚â† x‚ÇÅ) Œìp ‚Üí tt}


  rec-Lst-GlobalFibered : Œì ‚ä¢ Lst X GlobalFibered[ ps ]
                      -> Œì ‚ä¢ Z GlobalFibered[ ps ]
                      -> (Œì , X) , Z ‚ä¢ Z GlobalFibered[ ps ]
                      -> Œì ‚ä¢ Z GlobalFibered[ ps ]
  rec-Lst-GlobalFibered {X = X} {Z = Z} t s u = incl Œª
    { p x Zp Œìp ‚Üí
      let Xp = œÄ-Type-Proof X (‚¶ó p ‚¶ò‚Çä)
      in rec-Lst (‚ü® t ‚ü© p x (Lst Xp) Œìp) (‚ü® s ‚ü© p x Zp Œìp) ((‚ü® u ‚ü© p x Zp ((Œìp , toplevel Xp) , toplevel Zp)))
    }


  -------------------
  -- broadcast

  broadcast-GlobalFibered : Œì ‚ä¢ ‚óª X Ôº† qs GlobalFibered[ ps ]
                            -> Œì ‚ä¢ Tr X GlobalFibered[ ps ]
  ‚ü® broadcast-GlobalFibered {X = X} {qs = qs} t ‚ü© p x (Tr Xp) Œìp with p ‚àà? ‚ü® fst qs ‚ü©
  ... | no p‚àâqs = recv Xp
  ... | yes p‚ààqs = send Xp (‚ü® t ‚ü© p x (proj-Ôº† (incl (incl f)) done) Œìp)
    where
      f = Œª { _ here ‚Üí p‚ààqs}
-}
