
{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiCore.Language.Kami.Check where

open import Agora.Conventions hiding (n ; _‚à£_)
open import Agora.Data.Sum.Definition
open import Agora.Data.Fin.Definition
open import Agora.Category.Std.Category.Definition
open import KamiCore.Foreign.Parser.Definition
open import KamiCore.Pipeline.Definition
open import KamiCore.Language.MTT.Definition
open import KamiCore.Language.MTT.Properties
open import KamiTheory.Basics
open import KamiTheory.Order.StrictOrder.Base
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Definition hiding (Mode)
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Instance.2Category
open import KamiTheory.Main.Generic.ModeSystem.2Graph.Definition renaming (_‚óÜ_ to _‚óÜ'_ ; id to id')
open import Agda.Builtin.String using () renaming (primStringEquality to _==-String_)
open import KamiCore.Language.Kami.Setup
open import KamiCore.Language.Kami.Raw

check-mode : ‚àÄ{m} -> {Œì : Ctx} -> {A : ùîêTT‚ä¢Type m}
             -> (Œì ‚ä¢ A)
             -> Error +-ùí∞ (‚àë Œª k -> ‚àë Œª (Œì' : ùîêTT‚ä¢Ctx {k} m) -> Œì' ùîêTT‚ä¢ A)
check-mode (var x) = {!!}
check-mode (var' x) = {!!}
check-mode (mod Œº t) = {!!}
check-mode (letmod t t‚ÇÅ) = {!!}
check-mode (lam x t) = {!!}
check-mode (app t t‚ÇÅ) = {!!}
check-mode (left t) = {!!}
check-mode (right t) = {!!}
check-mode (rec-Either t t‚ÇÅ t‚ÇÇ) = {!!}
check-mode (rec-Lst t t‚ÇÅ t‚ÇÇ) = {!!}
check-mode nil = {!!}
check-mode (cons t t‚ÇÅ) = {!!}
check-mode tt = {!!}

