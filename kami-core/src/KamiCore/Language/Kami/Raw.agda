
{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiCore.Language.Kami.Raw where

open import Agora.Conventions hiding (n ; _‚à£_)
open import Agora.Data.Sum.Definition
open import Agora.Data.Fin.Definition
open import Agora.Category.Std.Category.Definition
open import KamiCore.Foreign.Parser.Definition
open import KamiCore.Pipeline.Definition
open import KamiCore.Language.MTT.Definition
open import KamiCore.Language.MTT.Properties
open import KamiTheory.Basics
open import KamiTheory.Order.StrictOrder.Base
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Definition hiding (Mode)
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Instance.2Category
open import KamiTheory.Main.Generic.ModeSystem.2Graph.Definition renaming (_‚óÜ_ to _‚óÜ'_ ; id to id')
open import Agda.Builtin.String using () renaming (primStringEquality to _==-String_)

cmp-Name : Name -> Name -> Bool
cmp-Name x y = getName x ==-String getName y

n : ‚Ñï
n = 2

_>>=_ = bind-+-ùí∞

return : ‚àÄ{A : ùí∞ ùëñ} {B : ùí∞ ùëó} -> B -> A + B
return = right

open Generic n using (Source ; Chor)

ùìÇ = ModeTheory Source 

open ùîêTT/Definition Source
open [ùîêTT/Definition::Type] renaming (‚ä¢Type to ùîêTT‚ä¢Type)
open [ùîêTT/Definition::Ctx] renaming (‚ä¢Ctx to ùîêTT‚ä¢Ctx)
open [ùîêTT/Definition::Term] renaming (_‚ä¢_ to _ùîêTT‚ä¢_)
open Variables/Type
open ùîêTT/Properties Source


open import KamiCore.Language.ChorMTT.Definition
open ChorùîêTT/Definition Chor
open [ChorùîêTT/Definition::Param]


open import KamiCore.Language.StdProc.Definition
open import KamiTheory.Data.UniqueSortedList.Definition
open import KamiTheory.Data.UniqueSortedList.Properties
open import KamiTheory.Data.UniqueSortedList.NonEmpty
open import KamiTheory.Data.UniqueSortedList.Instance.Preorder

-- well-scoped but not typed

RR = P

Error = String


-- data Mode : ùí∞‚ÇÄ where
--   Local Global : Mode
Mode = ‚ü® ùìÇ ‚ü©

-- data ‚ä¢Type_ : Mode -> ùí∞‚ÇÄ where

Modality' : Mode -> Mode -> ùí∞‚ÇÄ
Modality' a b = Hom {{(of ‚Ü≥ ùìÇ)}} a b

data Ctx : ùí∞‚ÇÄ where
  Œµ : Ctx
  _,_ : Ctx -> Name √ó-ùí∞ (‚àë Œª m -> ‚àë Œª n -> Modality' m n √ó-ùí∞ ùîêTT‚ä¢Type m) -> Ctx

private variable Œì : Ctx
private variable x y : Name

tr-loc : Location -> ùí´‚Çä·∂†‚Å±‚Åø (ùîΩ (suc n))
tr-loc L0 = ‚¶ó zero ‚¶ò‚Çä
tr-loc L1 = ‚¶ó suc zero ‚¶ò‚Çä
tr-loc L2 = ‚¶ó suc (suc zero) ‚¶ò‚Çä

modecheck' : TypeVal -> (m : Mode) -> Error +-ùí∞ (‚àë Œª n -> (Modality' n m) √ó-ùí∞ ùîêTT‚ä¢Type n)
modecheck : TypeVal -> (m : Mode) -> Error +-ùí∞ (ùîêTT‚ä¢Type m)
modecheck-modality : Modality -> (m : Mode) -> Error +-ùí∞ (‚àë Œª n -> Modality' n m)
modecheck-modality (At x) m with m ‚âü ‚óØ -- (‚ñ≤ (tr-loc x))
... | no x‚ÇÅ = left "encountered an Ôº† modality but target mode is not global "
... | yes refl-‚â° = right $ _ , (`Ôº†` (tr-loc x) ‚®æ id')
modecheck-modality Box (‚ñ≤ x) = right $ _ , `[]` ‚®æ id'
modecheck-modality Box ‚óØ = left "encountered a {} modality but target mode is not local"

modecheck (Fun A B) m = do
  n , Œº , A'  <- modecheck' A m
  B' <- modecheck B m
  return (‚üÆ A' ‚à£ Œº ‚üØ‚áí B')
modecheck (Prod A B) m = do
  A' <- modecheck A m
  B' <- modecheck B m
  left "Products currently not implemented" -- {!A' √ó√ó B'!}
modecheck (Sum A B) m = do
  A' <- modecheck A m
  B' <- modecheck B m
  return (Either A' B')
modecheck (Modal A B) m = do
  n , Œº <- modecheck-modality A m
  B' <- modecheck B n
  return ‚ü® B' ‚à£ Œº ‚ü©
modecheck (Lst A) m = do
  A' <- modecheck A m
  return (Lst A')
modecheck Unit m = do
  return Unit

modecheck' (Modal A B) m = do
  n , Œº <- modecheck-modality A m
  k , ŒΩ , B' <- modecheck' B n
  return $ _ , (ŒΩ ‚óÜ' Œº) , B'
modecheck' A m = do
  A' <- modecheck A m
  return $ m , id , A'

data _‚ä¢Var_ : Ctx -> ‚àÄ{a} -> ùîêTT‚ä¢Type a -> ùí∞‚ÇÄ where
  zero : ‚àÄ{m n Œº A} -> Œì , (x , (m , n , Œº , A)) ‚ä¢Var A
  suc : ‚àÄ{m} -> ‚àÄ{A : ùîêTT‚ä¢Type m} -> ‚àÄ{y} -> Œì ‚ä¢Var A -> Œì , y ‚ä¢Var A

data _‚ä¢_ : Ctx -> ‚àÄ{m} -> ùîêTT‚ä¢Type m -> ùí∞‚ÇÄ where
  var : Œì ‚ä¢Var A -> Œì ‚ä¢ A

  lam : ‚àÄ x  -> Œì , (x , (_ , _ , Œº , A)) ‚ä¢ B -> Œì ‚ä¢ ‚üÆ A ‚à£ Œº ‚üØ‚áí B
  app : Œì ‚ä¢ ‚üÆ A ‚à£ Œº ‚üØ‚áí B -> Œì ‚ä¢ A -> Œì ‚ä¢ B

  tt : ‚àÄ{m} -> Œì ‚ä¢ Unit {m}

typecheck-Var : (x : Name) (m : Mode) -> Error +-ùí∞ (‚àë Œª (A : ùîêTT‚ä¢Type m) -> Œì ‚ä¢Var A)
typecheck-Var {Œì = Œµ} x m = no $ "No variable " <> show x <> " in scope"
typecheck-Var {Œì = Œì , (y , (n , _ , Œº , A))} x m =
  if cmp-Name x y
    then (withModeEquality m n Œª {refl-‚â° -> right $ A , zero})
    else do
      A' , v <- typecheck-Var {Œì = Œì} x m
      return $ A' , suc v


withArrow : ‚àÄ{m} {X : ùí∞ ùëñ}
          -> (F : ùîêTT‚ä¢Type m)
          -> ((‚àë Œª n -> ‚àë Œª Œº -> ‚àë Œª (A : ùîêTT‚ä¢Type n) -> ‚àë Œª (B : ùîêTT‚ä¢Type m) -> F ‚â° ‚üÆ A ‚à£ Œº ‚üØ‚áí B) -> Error +-ùí∞ X)
          -> Error +-ùí∞ X
withArrow (‚üÆ A ‚à£ Œº ‚üØ‚áí B) t = t (_ , Œº , A , B , refl-‚â°)
withArrow X t = left "Expected function type on left side of application"


typecheck : TermVal -> (m : Mode) -> Error +-ùí∞ (‚àë Œª (A : ùîêTT‚ä¢Type m) -> Œì ‚ä¢ A)
typecheck (Var x) m = mapRight (Œª (A , v) -> (A , var v)) (typecheck-Var x m)
typecheck (Lam (mkFunArg x A) t) m = do
  n , Œº , A' <- modecheck' A m
  B' , t' <- typecheck t m
  right (‚üÆ A' ‚à£ Œº ‚üØ‚áí B' , lam x t')
typecheck (App t s) m = do
  F , t' <- typecheck t m
  withArrow F Œª {(n , Œº , A , B , refl-‚â°) -> do
    A' , s' <- typecheck s n
    withTypeEquality A A' Œª {refl-‚â° -> do
      return (B , app t' s')}}

typecheck (Fst t) = {!!}
typecheck (Snd t) = {!!}
typecheck (MkProd t t‚ÇÅ) = {!!}
typecheck (Left t) = {!!}
typecheck (Right t) = {!!}
typecheck (Either t t‚ÇÅ t‚ÇÇ) = {!!}
typecheck Nil = {!!}
typecheck (Cons t t‚ÇÅ) = {!!}
typecheck (ListRec t t‚ÇÅ t‚ÇÇ) = {!!}
typecheck TT m = right $ _ , tt
typecheck (Check t x) = {!!}


