
{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiCore.Language.Kami.Raw where

open import Agora.Conventions hiding (n ; _‚à£_)
open import Agora.Data.Sum.Definition
open import Agora.Data.Fin.Definition
open import Agora.Category.Std.Category.Definition
open import KamiCore.Foreign.Parser.Definition
open import KamiCore.Pipeline.Definition
open import KamiCore.Language.MTT.Definition
open import KamiCore.Language.MTT.Properties
open import KamiTheory.Basics
open import KamiTheory.Order.StrictOrder.Base
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Definition hiding (Mode)
open import KamiTheory.Main.Generic.ModeSystem.ModeSystem.Instance.2Category
open import KamiTheory.Main.Generic.ModeSystem.2Graph.Definition renaming (_‚óÜ_ to _‚óÜ'_ ; id to id')
open import Agda.Builtin.String using () renaming (primStringEquality to _==-String_)

cmp-Name : Name -> Name -> Bool
cmp-Name x y = getName x ==-String getName y

n : ‚Ñï
n = 2

_>>=_ = bind-+-ùí∞

return : ‚àÄ{A : ùí∞ ùëñ} {B : ùí∞ ùëó} -> B -> A + B
return = right

open Generic n using (Source ; Chor)

ùìÇ = ModeTheory Source 

open ùîêTT/Definition Source
open [ùîêTT/Definition::Type] renaming (‚ä¢Type to ùîêTT‚ä¢Type)
open [ùîêTT/Definition::Ctx] renaming (‚ä¢Ctx to ùîêTT‚ä¢Ctx)
open [ùîêTT/Definition::Term] renaming (_‚ä¢_ to _ùîêTT‚ä¢_)
open Variables/Type
open ùîêTT/Properties Source


open import KamiCore.Language.ChorMTT.Definition
open ChorùîêTT/Definition Chor
open [ChorùîêTT/Definition::Param]


open import KamiCore.Language.StdProc.Definition
open import KamiTheory.Data.UniqueSortedList.Definition
open import KamiTheory.Data.UniqueSortedList.Properties
open import KamiTheory.Data.UniqueSortedList.NonEmpty
open import KamiTheory.Data.UniqueSortedList.Instance.Preorder

-- well-scoped but not typed

RR = P

Error = String


-- data Mode : ùí∞‚ÇÄ where
--   Local Global : Mode
Mode = ‚ü® ùìÇ ‚ü©


-- data ‚ä¢Type_ : Mode -> ùí∞‚ÇÄ where

Modality' : Mode -> Mode -> ùí∞‚ÇÄ
Modality' a b = Hom {{(of ‚Ü≥ ùìÇ)}} a b

data Ctx : ùí∞‚ÇÄ where
  Œµ : Ctx
  _,_ : Ctx -> Name √ó-ùí∞ (‚àë Œª m -> ‚àë Œª n -> Modality' m n √ó-ùí∞ ùîêTT‚ä¢Type m) -> Ctx

private variable Œì : Ctx
private variable x y : Name

tr-loc : Location -> ùí´‚Çä·∂†‚Å±‚Åø (ùîΩ (suc n))
tr-loc L0 = ‚¶ó zero ‚¶ò‚Çä
tr-loc L1 = ‚¶ó suc zero ‚¶ò‚Çä
tr-loc L2 = ‚¶ó suc (suc zero) ‚¶ò‚Çä

Local : Location -> Mode
Local l = ‚ñ≤ (tr-loc l)

Global : Mode
Global = ‚óØ

modecheck' : TypeVal -> (m : Mode) -> Error +-ùí∞ (‚àë Œª n -> (Modality' n m) √ó-ùí∞ ùîêTT‚ä¢Type n)
modecheck : TypeVal -> (m : Mode) -> Error +-ùí∞ (ùîêTT‚ä¢Type m)
modecheck-modality : Modality -> (m : Mode) -> Error +-ùí∞ (‚àë Œª n -> Modality' n m)
modecheck-modality (At x) m with m ‚âü ‚óØ -- (‚ñ≤ (tr-loc x))
... | no x‚ÇÅ = left "encountered an Ôº† modality but target mode is not global "
... | yes refl-‚â° = right $ _ , (`Ôº†` (tr-loc x) ‚®æ id')
modecheck-modality Box (‚ñ≤ x) = right $ _ , `[]` ‚®æ id'
modecheck-modality Box ‚óØ = left "encountered a {} modality but target mode is not local"

modecheck (Fun A B) m = do
  n , Œº , A'  <- modecheck' A m
  B' <- modecheck B m
  return (‚üÆ A' ‚à£ Œº ‚üØ‚áí B')
modecheck (Prod A B) m = do
  A' <- modecheck A m
  B' <- modecheck B m
  left "Products currently not implemented" -- {!A' √ó√ó B'!}
modecheck (Sum A B) m = do
  A' <- modecheck A m
  B' <- modecheck B m
  return (Either A' B')
modecheck (Modal A B) m = do
  n , Œº <- modecheck-modality A m
  B' <- modecheck B n
  return ‚ü® B' ‚à£ Œº ‚ü©
modecheck (Lst A) m = do
  A' <- modecheck A m
  return (Lst A')
modecheck Unit m = do
  return Unit

modecheck' (Modal A B) m = do
  n , Œº <- modecheck-modality A m
  k , ŒΩ , B' <- modecheck' B n
  return $ _ , (ŒΩ ‚óÜ' Œº) , B'
modecheck' A m = do
  A' <- modecheck A m
  return $ m , id , A'

data _‚ä¢Var_ : Ctx -> ‚àÄ{a} -> ùîêTT‚ä¢Type a -> ùí∞‚ÇÄ where
  zero : ‚àÄ{m n Œº A} -> Œì , (x , (m , n , Œº , A)) ‚ä¢Var A
  suc : ‚àÄ{m} -> ‚àÄ{A : ùîêTT‚ä¢Type m} -> ‚àÄ{y} -> Œì ‚ä¢Var A -> Œì , y ‚ä¢Var A

‚ü®_‚à£*_‚ü© : ‚àÄ{m n} -> ùîêTT‚ä¢Type m -> m ‚ü∂ n -> ùîêTT‚ä¢Type n
‚ü® A ‚à£* id' ‚ü© = A
‚ü® A ‚à£* `Ôº†` U ‚®æ x‚ÇÅ ‚ü© = ‚ü® ‚ü® A ‚à£ `Ôº†` U ‚®æ id' ‚ü© ‚à£* x‚ÇÅ ‚ü©
‚ü® A ‚à£* `[]` ‚®æ x‚ÇÅ ‚ü© = ‚ü® ‚ü® A ‚à£ `[]` ‚®æ id' ‚ü© ‚à£* x‚ÇÅ ‚ü©

data _‚ä¢_ : Ctx -> ‚àÄ{m} -> ùîêTT‚ä¢Type m -> ùí∞‚ÇÄ where
  var : Œì ‚ä¢Var A -> Œì ‚ä¢ A

  lam : ‚àÄ x  -> Œì , (x , (_ , _ , Œº , A)) ‚ä¢ B -> Œì ‚ä¢ ‚üÆ A ‚à£ Œº ‚üØ‚áí B
  app : Œì ‚ä¢ ‚üÆ A ‚à£ Œº ‚üØ‚áí B -> Œì ‚ä¢ A -> Œì ‚ä¢ B

  rec-Either : Œì ‚ä¢ Either ‚ü® A ‚à£* Œº ‚ü© ‚ü® B ‚à£* ŒΩ ‚ü©
               -> Œì , (x , (_ , _ , Œº , A)) ‚ä¢ C
               -> Œì , (x , (_ , _ , ŒΩ , B)) ‚ä¢ C
               -> Œì ‚ä¢ C

  rec-Lst : Œì ‚ä¢ Lst ‚ü® A ‚à£* Œº ‚ü©
               -> Œì ‚ä¢ ‚ü® C ‚à£* ŒΩ ‚ü©
               -> (Œì , (x , (_ , _ , Œº , A))) , (x , (_ , _ , ŒΩ , C)) ‚ä¢ ‚ü® C ‚à£* ŒΩ ‚ü©
               -> Œì ‚ä¢ ‚ü® C ‚à£* ŒΩ ‚ü©

  nil : Œì ‚ä¢ Lst A
  cons : Œì ‚ä¢ A -> Œì ‚ä¢ Lst A -> Œì ‚ä¢ Lst A

  tt : ‚àÄ{m} -> Œì ‚ä¢ Unit {m}

wk : ‚àÄ{x Y} -> Œì ‚ä¢ A -> Œì , (x , Y) ‚ä¢ A
wk = {!!}

infer-Var : (x : Name) (m : Mode) -> Error +-ùí∞ (‚àë Œª (A : ùîêTT‚ä¢Type m) -> Œì ‚ä¢Var A)
infer-Var {Œì = Œµ} x m = no $ "No variable " <> show x <> " in scope"
infer-Var {Œì = Œì , (y , (n , _ , Œº , A))} x m =
  if cmp-Name x y
    then (withModeEquality m n Œª {refl-‚â° -> right $ A , zero})
    else do
      A' , v <- infer-Var {Œì = Œì} x m
      return $ A' , suc v


withArrow : ‚àÄ{m} {X : ùí∞ ùëñ}
          -> (F : ùîêTT‚ä¢Type m)
          -> ((‚àë Œª n -> ‚àë Œª Œº -> ‚àë Œª (A : ùîêTT‚ä¢Type n) -> ‚àë Œª (B : ùîêTT‚ä¢Type m) -> F ‚â° ‚üÆ A ‚à£ Œº ‚üØ‚áí B) -> Error +-ùí∞ X)
          -> Error +-ùí∞ X
withArrow (‚üÆ A ‚à£ Œº ‚üØ‚áí B) t = t (_ , Œº , A , B , refl-‚â°)
withArrow X t = left "Expected function type on left side of application"

withSum : ‚àÄ{m} {X : ùí∞ ùëñ}
          -> (F : ùîêTT‚ä¢Type m)
          -> ((‚àë Œª (A : ùîêTT‚ä¢Type m) -> ‚àë Œª (B : ùîêTT‚ä¢Type m) -> F ‚â° Either A B) -> Error +-ùí∞ X)
          -> Error +-ùí∞ X
withSum (Either A B) t = t (A , B , refl-‚â°)
withSum X t = left "Expected sum type"

withLst : ‚àÄ{m} {X : ùí∞ ùëñ}
          -> (F : ùîêTT‚ä¢Type m)
          -> ((‚àë Œª (A : ùîêTT‚ä¢Type m) -> F ‚â° Lst A) -> Error +-ùí∞ X)
          -> Error +-ùí∞ X
withLst (Lst A) t = t (A , refl-‚â°)
withLst X t = left "Expected list type"

_&&_ : {X : ùí∞ ùëñ} {A : ùí∞ ùëó} {B : ùí∞ ùëò}
     -> (‚àÄ {X : ùí∞ ùëñ} -> (A -> Error +-ùí∞ X) -> Error +-ùí∞ X)
     -> (‚àÄ {X : ùí∞ ùëñ} -> (B -> Error +-ùí∞ X) -> Error +-ùí∞ X)
     -> (((A √ó-ùí∞ B) -> Error +-ùí∞ X) -> Error +-ùí∞ X)
_&&_ F G œï = F Œª a -> G Œª b -> œï (a , b)

infixr 30 _&&_


check : TermVal -> (m : Mode) -> (A : ùîêTT‚ä¢Type m) -> Error +-ùí∞ (Œì ‚ä¢ A)

infer : TermVal -> (m : Mode) -> Error +-ùí∞ (‚àë Œª (A : ùîêTT‚ä¢Type m) -> Œì ‚ä¢ A)
infer (Var x) m = mapRight (Œª (A , v) -> (A , var v)) (infer-Var x m)
infer (Lam (mkFunArg x A) t) m = do
  n , Œº , A' <- modecheck' A m
  B' , t' <- infer t m
  right (‚üÆ A' ‚à£ Œº ‚üØ‚áí B' , lam x t')
infer (App t s) m = do
  F , t' <- infer t m
  withArrow F Œª {(n , Œº , A , B , refl-‚â°) -> do
    A' , s' <- infer s n
    withTypeEquality A A' Œª {refl-‚â° -> do
      return (B , app t' s')}}

infer (Fst t) m = left "not implemented: product types"
infer (Snd t) m = left "not implemented: product types"
infer (MkProd t t‚ÇÅ) m = left "not implemented: product types"
infer (Left t) m = left "encountered `left` in a place where the required type is unknown"
infer (Right t) m = left "encountered `right` in a place where the required type is unknown"
infer {Œì = Œì} (Either x f g) m = do
  X , x' <- infer x m
  withSum X Œª {(A , B , refl-‚â°) -> do
    F , f' <- infer f m
    G , g' <- infer {Œì = Œì} g m
    (withArrow F && withArrow G) Œª {((_ , Œº , A' , Y' , refl-‚â°) , (_ , ŒΩ , B' , Z' , refl-‚â°)) -> do
      (withTypeEquality ‚ü® A' ‚à£* Œº ‚ü© A && withTypeEquality ‚ü® B' ‚à£* ŒΩ ‚ü© B && withTypeEquality Y' Z') Œª {(refl-‚â° , refl-‚â° , refl-‚â°) -> do
        return $ Z' , rec-Either {Œº = Œº} {ŒΩ = ŒΩ} {x = mkName "either-var"} x' (app (wk f') (var zero)) ((app (wk g') (var zero))) 
        }
      }
    }
infer Nil m = left "encountered `Nil` in a place where the required type is unknown"
infer (Cons x xs) m = do
  X , x' <- infer x m
  xs' <- check xs m (Lst X)
  return (Lst X , cons x' xs' )
infer (ListRec xs fnil fcons) m = do
  XS , xs' <- infer xs m
  withLst XS Œª {(X , refl-‚â°) -> do
    Z , fnil' <- infer fnil m
    Fcons , fcons' <- infer fcons m
    withArrow Fcons Œª {(_ , Œº0 , F0 , F12 , refl-‚â°) -> do
      withArrow F12 Œª {(_ , Œº1 , F1 , F2 , refl-‚â°) -> do
        (withTypeEquality ‚ü® F0 ‚à£* Œº0 ‚ü© X && withTypeEquality F2 Z && withTypeEquality ‚ü® F1 ‚à£* Œº1 ‚ü© F2) Œª {(refl-‚â° , refl-‚â° , refl-‚â°) -> do
          return $ F2 , rec-Lst {Œº = Œº0} {ŒΩ = Œº1} {x = mkName "lstrec-var"} xs' fnil' (app (app (wk (wk fcons')) (var (suc zero))) (var zero))
          }
        }
      }
    }
infer TT m = right $ _ , tt
infer (Check t x) m = do
  X <- modecheck x m
  x' <- check t m X
  return $ X , x'

check (Var x) m A = {!!}
check (Lam x t) m A = {!!}
check (App t t‚ÇÅ) m A = {!!}
check (Fst t) m A = {!!}
check (Snd t) m A = {!!}
check (MkProd t t‚ÇÅ) m A = {!!}
check (Left t) m A = {!!}
check (Right t) m A = {!!}
check (Either t t‚ÇÅ t‚ÇÇ) m A = {!!}
check Nil m A = {!!}
check (Cons t t‚ÇÅ) m A = {!!}
check (ListRec t t‚ÇÅ t‚ÇÇ) m A = {!!}
check TT m A = {!!}
check (Check t x) m A = {!!}

