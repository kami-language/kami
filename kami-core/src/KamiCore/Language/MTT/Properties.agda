-- SPDX-FileCopyrightText: 2024 Maxim Urschumzew <mxmurw@determi.io>
--
-- SPDX-License-Identifier: MIT

{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiCore.Language.MTT.Properties where

open import Agora.Conventions hiding (m ; n ; k ; _‚à£_)
open import Agora.Data.Product.Definition
open import Agora.Category.Std.Category.Definition
open import Agora.Category.Std.2Category.Definition
open import Agora.Category.Std.Functor.Definition
open import Agora.Category.Std.Natural.Definition
open import Agora.Category.Std.Morphism.Iso
open import Agora.Category.Std.Category.Structured.Classified.Definition
open import Agora.Order.Preorder
open import Agora.Order.Lattice

open import KamiTheory.Main.Generic.ModeSystem.2Graph.Definition renaming (_‚óÜ_ to _‚óÜ'_ ; id to id')

open import Data.Vec hiding ([_] ; map)

open import KamiCore.Language.MTT.Definition



module _ {A : ùí∞ ùëñ} {B : A -> ùí∞ ùëó} where
  instance
    hasDecidableEquality:‚àë : {{_ : hasDecidableEquality A}} -> {{_ : ‚àÄ{a : A} -> hasDecidableEquality (B a)}} -> hasDecidableEquality (‚àë B)
    hasDecidableEquality:‚àë = record { _‚âü_ = f }
      where
        f : (x y : ‚àë B) -> isDecidable (x ‚â° y)
        f (a0 , b0) (a1 , b1) with a0 ‚âü a1
        ... | no x = no Œª {refl-‚â° ‚Üí x refl-‚â°}
        ... | yes refl-‚â° with b0 ‚âü b1
        ... | no x = no Œª {refl-‚â° ‚Üí x refl-‚â°}
        ... | yes refl-‚â° = yes refl-‚â°



ofTypeSyntax : (A : ùí∞ ùëñ) (a : A) -> A
ofTypeSyntax A a = a

syntax ofTypeSyntax A a = a ofType A

module ùîêTT/Properties {ùëñ : ùîè ^ 6} (This : MTT ùëñ) where
  open ùîêTT/Definition This
  open [ùîêTT/Definition::Type]
  private ùìÇ = ModeTheory This

  decide-‚â°-ùîêTT‚ä¢Type : ‚àÄ{m} -> (A B : ‚ä¢Type m) -> (¬¨ A ‚â° B) +-ùí∞ (A ‚â° B)
  decide-‚â°-ùîêTT‚ä¢Type ‚ü® A ‚à£ Œº‚ÇÅ ‚ü© ‚ü® B ‚à£ Œº‚ÇÇ ‚ü© with ((_ , _) , Œº‚ÇÅ ofType (‚àë Œª ((a , b) : ‚ü® ùìÇ ‚ü© √ó-ùí∞ ‚ü® ùìÇ ‚ü©) -> a ‚ü∂ b)) ‚âü ((_ , _) , Œº‚ÇÇ)
  ... | no x = no Œª {refl-‚â° ‚Üí x refl-‚â°}
  ... | yes refl-‚â° with decide-‚â°-ùîêTT‚ä¢Type A B
  ... | no x = no Œª {refl-‚â° ‚Üí x refl-‚â°}
  ... | yes refl-‚â° = yes refl-‚â°
  decide-‚â°-ùîêTT‚ä¢Type ‚ü® A ‚à£ x ‚ü© Unit = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type ‚ü® A ‚à£ x ‚ü© (Tr B) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type ‚ü® A ‚à£ x ‚ü© (Either B B‚ÇÅ) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type ‚ü® A ‚à£ x ‚ü© (Lst B) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type ‚ü® A ‚à£ x ‚ü© (‚üÆ B ‚à£ x‚ÇÅ ‚üØ‚áí B‚ÇÅ) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type Unit ‚ü® B ‚à£ x ‚ü© = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type Unit Unit = yes refl-‚â°
  decide-‚â°-ùîêTT‚ä¢Type Unit (Tr B) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type Unit (Either B B‚ÇÅ) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type Unit (Lst B) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type Unit (‚üÆ B ‚à£ x ‚üØ‚áí B‚ÇÅ) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (Tr A) ‚ü® B ‚à£ x ‚ü© = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (Tr A) Unit = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (Tr A) (Tr B) with decide-‚â°-ùîêTT‚ä¢Type A B
  ... | no x = no Œª {refl-‚â° ‚Üí x refl-‚â°}
  ... | yes refl-‚â° = yes refl-‚â°
  decide-‚â°-ùîêTT‚ä¢Type (Tr A) (Either B B‚ÇÅ) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (Tr A) (Lst B) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (Tr A) (‚üÆ B ‚à£ x ‚üØ‚áí B‚ÇÅ) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (Either A A‚ÇÅ) ‚ü® B ‚à£ x ‚ü© = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (Either A A‚ÇÅ) Unit = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (Either A A‚ÇÅ) (Tr B) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (Either A A‚ÇÅ) (Either B B‚ÇÅ) with decide-‚â°-ùîêTT‚ä¢Type A B
  ... | no x = no Œª {refl-‚â° ‚Üí x refl-‚â°}
  ... | yes refl-‚â° with decide-‚â°-ùîêTT‚ä¢Type A‚ÇÅ B‚ÇÅ
  ... | no x = no Œª {refl-‚â° ‚Üí x refl-‚â°}
  ... | yes refl-‚â° = yes refl-‚â°
  decide-‚â°-ùîêTT‚ä¢Type (Either A A‚ÇÅ) (Lst B) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (Either A A‚ÇÅ) (‚üÆ B ‚à£ x ‚üØ‚áí B‚ÇÅ) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (Lst A) ‚ü® B ‚à£ x ‚ü© = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (Lst A) Unit = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (Lst A) (Tr B) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (Lst A) (Either B B‚ÇÅ) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (Lst A) (Lst B) with decide-‚â°-ùîêTT‚ä¢Type A B
  ... | no x = no Œª {refl-‚â° ‚Üí x refl-‚â°}
  ... | yes refl-‚â° = yes refl-‚â°
  decide-‚â°-ùîêTT‚ä¢Type (Lst A) (‚üÆ B ‚à£ x ‚üØ‚áí B‚ÇÅ) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (‚üÆ A ‚à£ x ‚üØ‚áí A‚ÇÅ) ‚ü® B ‚à£ x‚ÇÅ ‚ü© = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (‚üÆ A ‚à£ x ‚üØ‚áí A‚ÇÅ) Unit = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (‚üÆ A ‚à£ x ‚üØ‚áí A‚ÇÅ) (Tr B) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (‚üÆ A ‚à£ x ‚üØ‚áí A‚ÇÅ) (Either B B‚ÇÅ) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (‚üÆ A ‚à£ x ‚üØ‚áí A‚ÇÅ) (Lst B) = no Œª ()
  decide-‚â°-ùîêTT‚ä¢Type (‚üÆ A ‚à£ Œº ‚üØ‚áí A‚ÇÅ) (‚üÆ B ‚à£ Œº‚ÇÅ ‚üØ‚áí B‚ÇÅ) with ((_ , _) , Œº ofType (‚àë Œª ((a , b) : ‚ü® ùìÇ ‚ü© √ó-ùí∞ ‚ü® ùìÇ ‚ü©) -> a ‚ü∂ b)) ‚âü ((_ , _) , Œº‚ÇÅ)
  ... | no x = no Œª {refl-‚â° ‚Üí x refl-‚â°}
  ... | yes refl-‚â° with decide-‚â°-ùîêTT‚ä¢Type A B
  ... | no x = no Œª {refl-‚â° ‚Üí x refl-‚â°}
  ... | yes refl-‚â° with decide-‚â°-ùîêTT‚ä¢Type A‚ÇÅ B‚ÇÅ
  ... | no x = no Œª {refl-‚â° ‚Üí x refl-‚â°}
  ... | yes refl-‚â° = yes refl-‚â°


  instance
    hasDecidableEquality:ùîêTT‚ä¢Type : ‚àÄ{m} -> hasDecidableEquality (‚ä¢Type m)
    hasDecidableEquality:ùîêTT‚ä¢Type = record { _‚âü_ = decide-‚â°-ùîêTT‚ä¢Type }



  -----------------------------------------------
  -- Show

  module _ {{_ : ‚àÄ{m n : ‚ü® ùìÇ ‚ü©} -> IShow (m ‚ü∂ n)}} where
    show-Type : ‚àÄ{m} -> ‚ä¢Type m -> String
    show-Type ‚ü® X ‚à£ x ‚ü© = "‚ü® " <> show-Type X <> " ‚à£ " <> show x <> " ‚ü©"
    show-Type Unit = "Unit"
    show-Type (Tr X) = "(Tr " <> show-Type X <> ")"
    show-Type (Either X Y) = "(Either " <> show-Type X <> " " <> show-Type Y <> ")" 
    show-Type (Lst X) = "(List " <> show-Type X <> ")"
    show-Type (‚üÆ X ‚à£ Œº ‚üØ‚áí Y) = "‚ü® " <> show-Type X <> " ‚à£ " <> show Œº <> " ‚ü©‚áí " <> show-Type Y

    instance
      IShow:Type : ‚àÄ{m} -> IShow (‚ä¢Type m)
      IShow:Type = record { show = show-Type }


    withTypeEquality : ‚àÄ{m} {X : ùí∞ ùëñ}
                    (A B : ‚ä¢Type m)
                    (f : A ‚â° B -> (Text +-ùí∞ X))
                    ->
                    Text +-ùí∞ X
    withTypeEquality A B f with A ‚âü B
    ... | no x = left $ "expected types to be equal (" <> show A <> " == " <> show B <> ")"
    ... | yes x = f x



  module _ {{_ : IShow ‚ü® ùìÇ ‚ü©}} where
    withModeEquality : {X : ùí∞ ùëñ}
                    (A B : ‚ü® ùìÇ ‚ü©)
                    (f : A ‚â° B -> (Text +-ùí∞ X))
                    ->
                    Text +-ùí∞ X
    withModeEquality A B f with A ‚âü B
    ... | no x = left $ "expected modes to be equal (" <> show A <> " == " <> show B <> ")"
    ... | yes x = f x
