
{-# OPTIONS --allow-unsolved-metas --rewriting #-}

module KamiCore.Pipeline.Definition where

open import Agora.Conventions hiding (m ; n ; k ; _‚à£_)
open import Agora.Category.Std.Category.Definition
open import Agora.TypeTheory.ParamSTT.Definition
open import Agora.TypeTheory.ParamSTT.Instance.Category
open import Agora.Category.Std.2Category.Definition

open import KamiCore.Language.MTT.Definition
open import KamiCore.Language.MinMTT.Definition
open import KamiCore.Language.MinMTT.Translation
open import KamiCore.Language.ChorMTT.Definition
open import KamiCore.Language.ChorMTT.Translation
open import KamiCore.Language.ChorProc.Definition
open import KamiCore.Language.ChorProc.Translation
open import KamiCore.Language.StdProc.Definition
open import KamiCore.Language.StdProc.Translation

open import KamiTheory.Main.Generic.ModeSystem.2Graph.Definition renaming (_‚óÜ_ to _‚óÜ'_ ; id to id')


-- The inference & typechecking pipeline



-- The whole compilation pipeline
ùîâ : ParamSTTHom (Stdùîìroc) (ùîêTT _)
ùîâ = ùîâ‚ÇÑ ‚óÜ-ParamSTT
    ùîâ‚ÇÉ ‚óÜ-ParamSTT
    ùîâ‚ÇÇ ‚óÜ-ParamSTT
    ùîâ‚ÇÅ

----------------------------------------------------------
-- Examples

module Generic (n : ‚Ñï) where
  Target : StdProc
  Target = record { Roles = n }

  Chor : ChorMTT _
  Chor = ‚ü® ùîâ‚ÇÑ ‚óÜ-ParamSTT ùîâ‚ÇÉ ‚ü© Target

  -- open ChorùîêTT/Definition This
  open ChorùîêTT/Definition.[ChorùîêTT/Definition::Private] Chor
  open ChorùîêTT/Definition.[ChorùîêTT/Definition::Param] Chor

  Source : MTT _
  Source = ‚ü® ùîâ ‚ü© Target

  open ùîêTT/Definition Source
  open [ùîêTT/Definition::Type] --  renaming (‚ä¢Type to ùîêTT‚ä¢Type)
  open [ùîêTT/Definition::Ctx] -- renaming (‚ä¢Ctx to ùîêTT‚ä¢Ctx)
  open [ùîêTT/Definition::Term] -- renaming (_‚ä¢_ to _ùîêTT‚ä¢_ ; _‚ä¢Var‚üÆ_‚à£_‚áí_‚üØ to _ùîêTT‚ä¢Var‚üÆ_‚à£_‚áí_‚üØ ; _‚ä¢Var‚üÆ_‚à£_‚áí‚àº_‚üØ to _ùîêTT‚ä¢Var‚üÆ_‚à£_‚áí‚àº_‚üØ)
  open Variables/Mode
  open Variables/Hom
  open Variables/Ctx
  open Variables/Type


  pattern _Ôº†_ A u = ‚ü® A ‚à£ `Ôº†` u ‚®æ id' ‚ü©
  pattern ‚óª X = ‚ü® X ‚à£ `[]` ‚®æ id' ‚ü©

  infix 50 _Ôº†_

  pattern Œõ_ t = lam t
  pattern letmod_and_ t s = letmod id' t s
  pattern letmod[_]_and_ Œº t s = letmod Œº t s

  infix 10 Œõ_
  pattern _‚àò_ t s = app t s

  pattern _‚áí_ A B = ‚üÆ A ‚à£ id' ‚üØ‚áí B
  infixr 40 _‚áí_

  _‚àò'_ : Œì ‚ä¢ ‚üÆ A ‚à£ id' ‚üØ‚áí B -> Œì ‚ä¢ A -> Œì ‚ä¢ B
  _‚àò'_ = {!!}

  ev : ‚àÄ (u : ‚ü® P ‚ü©) -> `[]` ‚®æ `Ôº†` u ‚®æ id' ‚üπ id'
  ev = {!!}

  stage : ‚àÄ (u : ‚ü® P ‚ü©) -> id ‚üπ `Ôº†` u ‚®æ `[]` ‚®æ id'
  stage = {!!}
  



